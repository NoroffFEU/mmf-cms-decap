"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _react2 = require("@emotion/react");
var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _reactScrollSync = require("react-scroll-sync");
var _EditorControlPane = _interopRequireDefault(require("./EditorControlPane/EditorControlPane"));
var _EditorPreviewPane = _interopRequireDefault(require("./EditorPreviewPane/EditorPreviewPane"));
var _EditorToolbar = _interopRequireDefault(require("./EditorToolbar"));
var _i18n = require("../../lib/i18n");
var _collectionTypes = require("../../constants/collectionTypes");
var _collections = require("../../reducers/collections");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const PREVIEW_VISIBLE = 'cms.preview-visible';
const SCROLL_SYNC_ENABLED = 'cms.scroll-sync-enabled';
const SPLIT_PANE_POSITION = 'cms.split-pane-position';
const I18N_VISIBLE = 'cms.i18n-visible';
const styles = {
  splitPane: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.components.card, ";border-radius:0;height:100%;;label:splitPane;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  pane: process.env.NODE_ENV === "production" ? {
    name: "1yvxf4n-pane",
    styles: "height:100%;overflow-y:auto;label:pane;"
  } : {
    name: "1yvxf4n-pane",
    styles: "height:100%;overflow-y:auto;label:pane;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const EditorToggle = /*#__PURE__*/(0, _base.default)(_decapCmsUiDefault.IconButton, {
  target: "e1nx103k7",
  label: "EditorToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "cn3xcj",
  styles: "margin-bottom:12px"
} : {
  name: "cn3xcj",
  styles: "margin-bottom:12px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function ReactSplitPaneGlobalStyles() {
  return (0, _react2.jsx)(_react2.Global, {
    styles: /*#__PURE__*/(0, _react2.css)(".Resizer.vertical{width:2px;cursor:col-resize;position:relative;background:none;&:before{content:'';width:2px;height:100%;position:relative;background-color:", _decapCmsUiDefault.colors.textFieldBorder, ";display:block;z-index:10;transition:background-color ", _decapCmsUiDefault.transitions.main, ";}&:hover,&:active{&:before{width:4px;left:-1px;background-color:", _decapCmsUiDefault.colorsRaw.blue, ";}}};label:ReactSplitPaneGlobalStyles;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  });
}
const StyledSplitPane = /*#__PURE__*/(0, _base.default)(_reactSplitPane.default, {
  target: "e1nx103k6",
  label: "StyledSplitPane"
})(styles.splitPane, ";.Pane{height:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NoPreviewContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k5",
  label: "NoPreviewContainer"
})(styles.splitPane, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const EditorContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k4",
  label: "EditorContainer"
})("width:100%;min-width:800px;height:100%;position:absolute;top:0;left:0;overflow:hidden;padding-top:66px;background-color:", _decapCmsUiDefault.colors.background, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Editor = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k3",
  label: "Editor"
})(process.env.NODE_ENV === "production" ? {
  name: "yd3x82",
  styles: "height:100%;margin:0 auto;position:relative"
} : {
  name: "yd3x82",
  styles: "height:100%;margin:0 auto;position:relative",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PreviewPaneContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k2",
  label: "PreviewPaneContainer"
})("height:100%;pointer-events:", props => props.blockEntry ? 'none' : 'auto', ";overflow-y:", props => props.overFlow ? 'auto' : 'hidden', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlPaneContainer = /*#__PURE__*/(0, _base.default)(PreviewPaneContainer, {
  target: "e1nx103k1",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "b2tic3",
  styles: "padding:0 16px;position:relative;overflow-x:hidden"
} : {
  name: "b2tic3",
  styles: "padding:0 16px;position:relative;overflow-x:hidden",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ViewControls = /*#__PURE__*/(0, _base.default)("div", {
  target: "e1nx103k0",
  label: "ViewControls"
})("position:absolute;top:10px;right:10px;z-index:", _decapCmsUiDefault.zIndex.zIndex299, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function EditorContent({
  i18nVisible,
  previewVisible,
  editor,
  editorWithEditor,
  editorWithPreview
}) {
  if (i18nVisible) {
    return editorWithEditor;
  } else if (previewVisible) {
    return editorWithPreview;
  } else {
    return (0, _react2.jsx)(NoPreviewContainer, null, editor);
  }
}
function isPreviewEnabled(collection, entry) {
  if (collection.get('type') === _collectionTypes.FILES) {
    const file = (0, _collections.getFileFromSlug)(collection, entry.get('slug'));
    const previewEnabled = file === null || file === void 0 ? void 0 : file.getIn(['editor', 'preview']);
    if (previewEnabled != null) return previewEnabled;
  }
  return collection.getIn(['editor', 'preview'], true);
}
class EditorInterface extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showEventBlocker: false,
      previewVisible: localStorage.getItem(PREVIEW_VISIBLE) !== 'false',
      scrollSyncEnabled: localStorage.getItem(SCROLL_SYNC_ENABLED) !== 'false',
      i18nVisible: localStorage.getItem(I18N_VISIBLE) !== 'false'
    });
    _defineProperty(this, "handleSplitPaneDragStart", () => {
      this.setState({
        showEventBlocker: true
      });
    });
    _defineProperty(this, "handleSplitPaneDragFinished", () => {
      this.setState({
        showEventBlocker: false
      });
    });
    _defineProperty(this, "handleOnPersist", async (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      await this.controlPaneRef.switchToDefaultLocale();
      this.controlPaneRef.validate();
      this.props.onPersist({
        createNew,
        duplicate
      });
    });
    _defineProperty(this, "handleOnPublish", async (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      await this.controlPaneRef.switchToDefaultLocale();
      this.controlPaneRef.validate();
      this.props.onPublish({
        createNew,
        duplicate
      });
    });
    _defineProperty(this, "handleTogglePreview", () => {
      const newPreviewVisible = !this.state.previewVisible;
      this.setState({
        previewVisible: newPreviewVisible
      });
      localStorage.setItem(PREVIEW_VISIBLE, newPreviewVisible);
    });
    _defineProperty(this, "handleToggleScrollSync", () => {
      const newScrollSyncEnabled = !this.state.scrollSyncEnabled;
      this.setState({
        scrollSyncEnabled: newScrollSyncEnabled
      });
      localStorage.setItem(SCROLL_SYNC_ENABLED, newScrollSyncEnabled);
    });
    _defineProperty(this, "handleToggleI18n", () => {
      const newI18nVisible = !this.state.i18nVisible;
      this.setState({
        i18nVisible: newI18nVisible
      });
      localStorage.setItem(I18N_VISIBLE, newI18nVisible);
    });
    _defineProperty(this, "handleLeftPanelLocaleChange", locale => {
      this.setState({
        leftPanelLocale: locale
      });
    });
  }
  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      showDelete,
      onDelete,
      onDeleteUnpublishedChanges,
      onChangeStatus,
      onPublish,
      unPublish,
      onDuplicate,
      onValidate,
      user,
      hasChanged,
      displayUrl,
      hasWorkflow,
      useOpenAuthoring,
      hasUnpublishedChanges,
      isNewEntry,
      isModification,
      currentStatus,
      onLogoutClick,
      loadDeployPreview,
      deployPreview,
      draftKey,
      editorBackLink,
      t
    } = this.props;
    const {
      scrollSyncEnabled,
      showEventBlocker
    } = this.state;
    const previewEnabled = isPreviewEnabled(collection, entry);
    const {
      locales,
      defaultLocale
    } = (0, _i18n.getI18nInfo)(this.props.collection);
    const collectionI18nEnabled = (0, _i18n.hasI18n)(collection) && locales.length > 1;
    const editorProps = {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      onValidate
    };
    const leftPanelLocale = this.state.leftPanelLocale || (locales === null || locales === void 0 ? void 0 : locales[0]);
    const editor = (0, _react2.jsx)(ControlPaneContainer, {
      overFlow: true,
      blockEntry: showEventBlocker
    }, (0, _react2.jsx)(_EditorControlPane.default, _extends({}, editorProps, {
      ref: c => this.controlPaneRef = c,
      locale: leftPanelLocale,
      t: t,
      onLocaleChange: this.handleLeftPanelLocaleChange
    })));
    const editor2 = (0, _react2.jsx)(ControlPaneContainer, {
      overFlow: !this.state.scrollSyncEnabled,
      blockEntry: showEventBlocker
    }, (0, _react2.jsx)(_EditorControlPane.default, _extends({}, editorProps, {
      locale: locales === null || locales === void 0 ? void 0 : locales[1],
      t: t
    })));
    const previewEntry = collectionI18nEnabled ? (0, _i18n.getPreviewEntry)(entry, leftPanelLocale, defaultLocale) : entry;
    const editorWithPreview = (0, _react2.jsx)(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, (0, _react2.jsx)("div", null, (0, _react2.jsx)(ReactSplitPaneGlobalStyles, null), (0, _react2.jsx)(StyledSplitPane, {
      maxSize: -100,
      minSize: 400,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, (0, _react2.jsx)(_reactScrollSync.ScrollSyncPane, null, editor), (0, _react2.jsx)(PreviewPaneContainer, {
      blockEntry: showEventBlocker
    }, (0, _react2.jsx)(_EditorPreviewPane.default, {
      collection: collection,
      entry: previewEntry,
      fields: fields,
      fieldsMetaData: fieldsMetaData,
      locale: leftPanelLocale
    })))));
    const editorWithEditor = (0, _react2.jsx)(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, (0, _react2.jsx)("div", null, (0, _react2.jsx)(StyledSplitPane, {
      maxSize: -100,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, (0, _react2.jsx)(_reactScrollSync.ScrollSyncPane, null, editor), (0, _react2.jsx)(_reactScrollSync.ScrollSyncPane, null, editor2))));
    const i18nVisible = collectionI18nEnabled && this.state.i18nVisible;
    const previewVisible = previewEnabled && this.state.previewVisible;
    const scrollSyncVisible = i18nVisible || previewVisible;
    return (0, _react2.jsx)(EditorContainer, null, (0, _react2.jsx)(_EditorToolbar.default, {
      isPersisting: entry.get('isPersisting'),
      isPublishing: entry.get('isPublishing'),
      isUpdatingStatus: entry.get('isUpdatingStatus'),
      isDeleting: entry.get('isDeleting'),
      onPersist: this.handleOnPersist,
      onPersistAndNew: () => this.handleOnPersist({
        createNew: true
      }),
      onPersistAndDuplicate: () => this.handleOnPersist({
        createNew: true,
        duplicate: true
      }),
      onDelete: onDelete,
      onDeleteUnpublishedChanges: onDeleteUnpublishedChanges,
      onChangeStatus: onChangeStatus,
      showDelete: showDelete,
      onPublish: onPublish,
      unPublish: unPublish,
      onDuplicate: onDuplicate,
      onPublishAndNew: () => this.handleOnPublish({
        createNew: true
      }),
      onPublishAndDuplicate: () => this.handleOnPublish({
        createNew: true,
        duplicate: true
      }),
      user: user,
      hasChanged: hasChanged,
      displayUrl: displayUrl,
      collection: collection,
      hasWorkflow: hasWorkflow,
      useOpenAuthoring: useOpenAuthoring,
      hasUnpublishedChanges: hasUnpublishedChanges,
      isNewEntry: isNewEntry,
      isModification: isModification,
      currentStatus: currentStatus,
      onLogoutClick: onLogoutClick,
      loadDeployPreview: loadDeployPreview,
      deployPreview: deployPreview,
      editorBackLink: editorBackLink
    }), (0, _react2.jsx)(Editor, {
      key: draftKey
    }, (0, _react2.jsx)(ViewControls, null, collectionI18nEnabled && (0, _react2.jsx)(EditorToggle, {
      isActive: i18nVisible,
      onClick: this.handleToggleI18n,
      size: "large",
      type: "page",
      title: t('editor.editorInterface.toggleI18n'),
      marginTop: "70px"
    }), previewEnabled && (0, _react2.jsx)(EditorToggle, {
      isActive: previewVisible,
      onClick: this.handleTogglePreview,
      size: "large",
      type: "eye",
      title: t('editor.editorInterface.togglePreview')
    }), scrollSyncVisible && (0, _react2.jsx)(EditorToggle, {
      isActive: scrollSyncEnabled,
      onClick: this.handleToggleScrollSync,
      size: "large",
      type: "scroll",
      title: t('editor.editorInterface.toggleScrollSync')
    })), (0, _react2.jsx)(EditorContent, {
      i18nVisible: i18nVisible,
      previewVisible: previewVisible,
      editor: editor,
      editorWithEditor: editorWithEditor,
      editorWithPreview: editorWithPreview
    })));
  }
}
EditorInterface.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired,
  onPersist: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _propTypes.default.object,
  loadDeployPreview: _propTypes.default.func.isRequired,
  draftKey: _propTypes.default.string.isRequired,
  t: _propTypes.default.func.isRequired
};
var _default = exports.default = EditorInterface;