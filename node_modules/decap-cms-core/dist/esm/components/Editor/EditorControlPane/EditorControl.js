"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ControlHint = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));
var _partial2 = _interopRequireDefault(require("lodash/partial"));
var _react = _interopRequireDefault(require("react"));
var _redux = require("redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _reactPolyglot = require("react-polyglot");
var _react2 = require("@emotion/react");
var _reactRedux = require("react-redux");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _reactMarkdown = _interopRequireDefault(require("react-markdown"));
var _remarkGfm = _interopRequireDefault(require("remark-gfm"));
var _registry = require("../../../lib/registry");
var _entries = require("../../../actions/entries");
var _media = require("../../../actions/media");
var _medias = require("../../../reducers/medias");
var _search = require("../../../actions/search");
var _mediaLibrary = require("../../../actions/mediaLibrary");
var _Widget = _interopRequireDefault(require("./Widget"));
const _excluded = ["node"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /**
                                                                                                                                                                                                                                                                                           * This is a necessary bridge as we are still passing classnames to widgets
                                                                                                                                                                                                                                                                                           * for styling. Once that changes we can stop storing raw style strings like
                                                                                                                                                                                                                                                                                           * this.
                                                                                                                                                                                                                                                                                           */
const styleStrings = {
  widget: `
    display: block;
    width: 100%;
    padding: ${_decapCmsUiDefault.lengths.inputPadding};
    margin: 0;
    border: ${_decapCmsUiDefault.borders.textField};
    border-radius: ${_decapCmsUiDefault.lengths.borderRadius};
    border-top-left-radius: 0;
    outline: 0;
    box-shadow: none;
    background-color: ${_decapCmsUiDefault.colors.inputBackground};
    color: #444a57;
    transition: border-color ${_decapCmsUiDefault.transitions.main};
    position: relative;
    font-size: 15px;
    line-height: 1.5;

    select& {
      text-indent: 14px;
      height: 58px;
    }
  `,
  widgetActive: `
    border-color: ${_decapCmsUiDefault.colors.active};
  `,
  widgetError: `
    border-color: ${_decapCmsUiDefault.colors.errorText};
  `,
  disabled: `
    pointer-events: none;
    opacity: 0.5;
    background: #ccc;
  `,
  hidden: `
    visibility: hidden;
  `
};
const ControlContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "ec1nk3l2",
  label: "ControlContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}"
} : {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ControlErrorsList = /*#__PURE__*/(0, _base.default)("ul", {
  target: "ec1nk3l1",
  label: "ControlErrorsList"
})("list-style-type:none;font-size:12px;color:", _decapCmsUiDefault.colors.errorText, ";margin-bottom:5px;text-align:right;text-transform:uppercase;position:relative;font-weight:600;top:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlHint = exports.ControlHint = /*#__PURE__*/(0, _base.default)("p", {
  target: "ec1nk3l0",
  label: "ControlHint"
})("margin-bottom:0;padding:3px 0;font-size:12px;color:", props => props.error ? _decapCmsUiDefault.colors.errorText : props.active ? _decapCmsUiDefault.colors.active : _decapCmsUiDefault.colors.controlLabel, ";transition:color ", _decapCmsUiDefault.transitions.main, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function LabelComponent({
  field,
  isActive,
  hasErrors,
  uniqueFieldId,
  isFieldOptional,
  t
}) {
  const label = `${field.get('label', field.get('name'))}`;
  const labelComponent = (0, _react2.jsx)(_decapCmsUiDefault.FieldLabel, {
    isActive: isActive,
    hasErrors: hasErrors,
    htmlFor: uniqueFieldId
  }, label, " ", `${isFieldOptional ? ` (${t('editor.editorControl.field.optional')})` : ''}`);
  return labelComponent;
}
class EditorControl extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      activeLabel: false
    });
    _defineProperty(this, "uniqueFieldId", (0, _uniqueId2.default)(`${this.props.field.get('name')}-field-`));
    _defineProperty(this, "isAncestorOfFieldError", () => {
      const {
        fieldsErrors
      } = this.props;
      if (fieldsErrors && fieldsErrors.size > 0) {
        return Object.values(fieldsErrors.toJS()).some(arr => arr.some(err => err.parentIds && err.parentIds.includes(this.uniqueFieldId)));
      }
      return false;
    });
  }
  render() {
    const {
      value,
      entry,
      collection,
      config,
      field,
      fieldsMetaData,
      fieldsErrors,
      mediaPaths,
      boundGetAsset,
      onChange,
      openMediaLibrary,
      clearMediaControl,
      removeMediaControl,
      addAsset,
      removeInsertedMedia,
      persistMedia,
      onValidate,
      processControlRef,
      controlRef,
      query,
      queryHits,
      isFetching,
      clearSearch,
      clearFieldErrors,
      loadEntry,
      className,
      isSelected,
      isEditorComponent,
      isNewEditorComponent,
      parentIds,
      t,
      validateMetaField,
      isLoadingAsset,
      isDisabled,
      isHidden,
      isFieldDuplicate,
      isFieldHidden,
      locale,
      isParentListCollapsed
    } = this.props;
    const widgetName = field.get('widget');
    const widget = (0, _registry.resolveWidget)(widgetName);
    const fieldName = field.get('name');
    const fieldHint = field.get('hint');
    const isFieldOptional = field.get('required') === false;
    const onValidateObject = onValidate;
    const metadata = fieldsMetaData && fieldsMetaData.get(fieldName);
    const errors = fieldsErrors && fieldsErrors.get(this.uniqueFieldId);
    const childErrors = this.isAncestorOfFieldError();
    const hasErrors = !!errors || childErrors;
    return (0, _react2.jsx)(_react2.ClassNames, null, ({
      css,
      cx
    }) => (0, _react2.jsx)(ControlContainer, {
      className: className,
      css: css`
              ${isHidden && styleStrings.hidden};
            `
    }, widget.globalStyles && (0, _react2.jsx)(_react2.Global, {
      styles: /*#__PURE__*/(0, _react2.css)(widget.globalStyles, ";;label:EditorControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRPMkQiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvckNvbnRyb2xQYW5lL0VkaXRvckNvbnRyb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBDbGFzc05hbWVzLCBHbG9iYWwsIGNzcyBhcyBjb3JlQ3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcGFydGlhbCwgdW5pcXVlSWQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IEZpZWxkTGFiZWwsIGNvbG9ycywgdHJhbnNpdGlvbnMsIGxlbmd0aHMsIGJvcmRlcnMgfSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgUmVhY3RNYXJrZG93biBmcm9tICdyZWFjdC1tYXJrZG93bic7XG5pbXBvcnQgZ2ZtIGZyb20gJ3JlbWFyay1nZm0nO1xuXG5pbXBvcnQgeyByZXNvbHZlV2lkZ2V0LCBnZXRFZGl0b3JDb21wb25lbnRzIH0gZnJvbSAnLi4vLi4vLi4vbGliL3JlZ2lzdHJ5JztcbmltcG9ydCB7IGNsZWFyRmllbGRFcnJvcnMsIHRyeUxvYWRFbnRyeSwgdmFsaWRhdGVNZXRhRmllbGQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL2VudHJpZXMnO1xuaW1wb3J0IHsgYWRkQXNzZXQsIGJvdW5kR2V0QXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hY3Rpb25zL21lZGlhJztcbmltcG9ydCB7IHNlbGVjdElzTG9hZGluZ0Fzc2V0IH0gZnJvbSAnLi4vLi4vLi4vcmVkdWNlcnMvbWVkaWFzJztcbmltcG9ydCB7IHF1ZXJ5LCBjbGVhclNlYXJjaCB9IGZyb20gJy4uLy4uLy4uL2FjdGlvbnMvc2VhcmNoJztcbmltcG9ydCB7XG4gIG9wZW5NZWRpYUxpYnJhcnksXG4gIHJlbW92ZUluc2VydGVkTWVkaWEsXG4gIGNsZWFyTWVkaWFDb250cm9sLFxuICByZW1vdmVNZWRpYUNvbnRyb2wsXG4gIHBlcnNpc3RNZWRpYSxcbn0gZnJvbSAnLi4vLi4vLi4vYWN0aW9ucy9tZWRpYUxpYnJhcnknO1xuaW1wb3J0IFdpZGdldCBmcm9tICcuL1dpZGdldCc7XG5cbi8qKlxuICogVGhpcyBpcyBhIG5lY2Vzc2FyeSBicmlkZ2UgYXMgd2UgYXJlIHN0aWxsIHBhc3NpbmcgY2xhc3NuYW1lcyB0byB3aWRnZXRzXG4gKiBmb3Igc3R5bGluZy4gT25jZSB0aGF0IGNoYW5nZXMgd2UgY2FuIHN0b3Agc3RvcmluZyByYXcgc3R5bGUgc3RyaW5ncyBsaWtlXG4gKiB0aGlzLlxuICovXG5jb25zdCBzdHlsZVN0cmluZ3MgPSB7XG4gIHdpZGdldDogYFxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6ICR7bGVuZ3Rocy5pbnB1dFBhZGRpbmd9O1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXI6ICR7Ym9yZGVycy50ZXh0RmllbGR9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XG4gICAgb3V0bGluZTogMDtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmlucHV0QmFja2dyb3VuZH07XG4gICAgY29sb3I6ICM0NDRhNTc7XG4gICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICBsaW5lLWhlaWdodDogMS41O1xuXG4gICAgc2VsZWN0JiB7XG4gICAgICB0ZXh0LWluZGVudDogMTRweDtcbiAgICAgIGhlaWdodDogNThweDtcbiAgICB9XG4gIGAsXG4gIHdpZGdldEFjdGl2ZTogYFxuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgYCxcbiAgd2lkZ2V0RXJyb3I6IGBcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmVycm9yVGV4dH07XG4gIGAsXG4gIGRpc2FibGVkOiBgXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgb3BhY2l0eTogMC41O1xuICAgIGJhY2tncm91bmQ6ICNjY2M7XG4gIGAsXG4gIGhpZGRlbjogYFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgYCxcbn07XG5cbmNvbnN0IENvbnRyb2xDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAxNnB4O1xuXG4gICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXRvcDogMzZweDtcbiAgfVxuYDtcblxuY29uc3QgQ29udHJvbEVycm9yc0xpc3QgPSBzdHlsZWQudWxgXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMuZXJyb3JUZXh0fTtcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmb250LXdlaWdodDogNjAwO1xuICB0b3A6IDIwcHg7XG5gO1xuXG5leHBvcnQgY29uc3QgQ29udHJvbEhpbnQgPSBzdHlsZWQucGBcbiAgbWFyZ2luLWJvdHRvbTogMDtcbiAgcGFkZGluZzogM3B4IDA7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICR7cHJvcHMgPT5cbiAgICBwcm9wcy5lcnJvciA/IGNvbG9ycy5lcnJvclRleHQgOiBwcm9wcy5hY3RpdmUgPyBjb2xvcnMuYWN0aXZlIDogY29sb3JzLmNvbnRyb2xMYWJlbH07XG4gIHRyYW5zaXRpb246IGNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG5gO1xuXG5mdW5jdGlvbiBMYWJlbENvbXBvbmVudCh7IGZpZWxkLCBpc0FjdGl2ZSwgaGFzRXJyb3JzLCB1bmlxdWVGaWVsZElkLCBpc0ZpZWxkT3B0aW9uYWwsIHQgfSkge1xuICBjb25zdCBsYWJlbCA9IGAke2ZpZWxkLmdldCgnbGFiZWwnLCBmaWVsZC5nZXQoJ25hbWUnKSl9YDtcbiAgY29uc3QgbGFiZWxDb21wb25lbnQgPSAoXG4gICAgPEZpZWxkTGFiZWwgaXNBY3RpdmU9e2lzQWN0aXZlfSBoYXNFcnJvcnM9e2hhc0Vycm9yc30gaHRtbEZvcj17dW5pcXVlRmllbGRJZH0+XG4gICAgICB7bGFiZWx9IHtgJHtpc0ZpZWxkT3B0aW9uYWwgPyBgICgke3QoJ2VkaXRvci5lZGl0b3JDb250cm9sLmZpZWxkLm9wdGlvbmFsJyl9KWAgOiAnJ31gfVxuICAgIDwvRmllbGRMYWJlbD5cbiAgKTtcblxuICByZXR1cm4gbGFiZWxDb21wb25lbnQ7XG59XG5cbmNsYXNzIEVkaXRvckNvbnRyb2wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICBdKSxcbiAgICBmaWVsZDogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGZpZWxkc01ldGFEYXRhOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGZpZWxkc0Vycm9yczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBtZWRpYVBhdGhzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgYm91bmRHZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZUluc2VydGVkTWVkaWE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcGVyc2lzdE1lZGlhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uVmFsaWRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIHByb2Nlc3NDb250cm9sUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBjb250cm9sUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBxdWVyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBxdWVyeUhpdHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xlYXJTZWFyY2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2xlYXJGaWVsZEVycm9yczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBsb2FkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpc0VkaXRvckNvbXBvbmVudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNOZXdFZGl0b3JDb21wb25lbnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHBhcmVudElkczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgZW50cnk6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgaXNEaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRmllbGREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGlzRmllbGRIaWRkZW46IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1BhcmVudExpc3RDb2xsYXBzZWQ6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcGFyZW50SWRzOiBbXSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBhY3RpdmVMYWJlbDogZmFsc2UsXG4gIH07XG5cbiAgdW5pcXVlRmllbGRJZCA9IHVuaXF1ZUlkKGAke3RoaXMucHJvcHMuZmllbGQuZ2V0KCduYW1lJyl9LWZpZWxkLWApO1xuXG4gIGlzQW5jZXN0b3JPZkZpZWxkRXJyb3IgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBmaWVsZHNFcnJvcnMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoZmllbGRzRXJyb3JzICYmIGZpZWxkc0Vycm9ycy5zaXplID4gMCkge1xuICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZmllbGRzRXJyb3JzLnRvSlMoKSkuc29tZShhcnIgPT5cbiAgICAgICAgYXJyLnNvbWUoZXJyID0+IGVyci5wYXJlbnRJZHMgJiYgZXJyLnBhcmVudElkcy5pbmNsdWRlcyh0aGlzLnVuaXF1ZUZpZWxkSWQpKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWUsXG4gICAgICBlbnRyeSxcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBjb25maWcsXG4gICAgICBmaWVsZCxcbiAgICAgIGZpZWxkc01ldGFEYXRhLFxuICAgICAgZmllbGRzRXJyb3JzLFxuICAgICAgbWVkaWFQYXRocyxcbiAgICAgIGJvdW5kR2V0QXNzZXQsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBjbGVhck1lZGlhQ29udHJvbCxcbiAgICAgIHJlbW92ZU1lZGlhQ29udHJvbCxcbiAgICAgIGFkZEFzc2V0LFxuICAgICAgcmVtb3ZlSW5zZXJ0ZWRNZWRpYSxcbiAgICAgIHBlcnNpc3RNZWRpYSxcbiAgICAgIG9uVmFsaWRhdGUsXG4gICAgICBwcm9jZXNzQ29udHJvbFJlZixcbiAgICAgIGNvbnRyb2xSZWYsXG4gICAgICBxdWVyeSxcbiAgICAgIHF1ZXJ5SGl0cyxcbiAgICAgIGlzRmV0Y2hpbmcsXG4gICAgICBjbGVhclNlYXJjaCxcbiAgICAgIGNsZWFyRmllbGRFcnJvcnMsXG4gICAgICBsb2FkRW50cnksXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBpc1NlbGVjdGVkLFxuICAgICAgaXNFZGl0b3JDb21wb25lbnQsXG4gICAgICBpc05ld0VkaXRvckNvbXBvbmVudCxcbiAgICAgIHBhcmVudElkcyxcbiAgICAgIHQsXG4gICAgICB2YWxpZGF0ZU1ldGFGaWVsZCxcbiAgICAgIGlzTG9hZGluZ0Fzc2V0LFxuICAgICAgaXNEaXNhYmxlZCxcbiAgICAgIGlzSGlkZGVuLFxuICAgICAgaXNGaWVsZER1cGxpY2F0ZSxcbiAgICAgIGlzRmllbGRIaWRkZW4sXG4gICAgICBsb2NhbGUsXG4gICAgICBpc1BhcmVudExpc3RDb2xsYXBzZWQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB3aWRnZXROYW1lID0gZmllbGQuZ2V0KCd3aWRnZXQnKTtcbiAgICBjb25zdCB3aWRnZXQgPSByZXNvbHZlV2lkZ2V0KHdpZGdldE5hbWUpO1xuICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkLmdldCgnbmFtZScpO1xuICAgIGNvbnN0IGZpZWxkSGludCA9IGZpZWxkLmdldCgnaGludCcpO1xuICAgIGNvbnN0IGlzRmllbGRPcHRpb25hbCA9IGZpZWxkLmdldCgncmVxdWlyZWQnKSA9PT0gZmFsc2U7XG4gICAgY29uc3Qgb25WYWxpZGF0ZU9iamVjdCA9IG9uVmFsaWRhdGU7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBmaWVsZHNNZXRhRGF0YSAmJiBmaWVsZHNNZXRhRGF0YS5nZXQoZmllbGROYW1lKTtcbiAgICBjb25zdCBlcnJvcnMgPSBmaWVsZHNFcnJvcnMgJiYgZmllbGRzRXJyb3JzLmdldCh0aGlzLnVuaXF1ZUZpZWxkSWQpO1xuICAgIGNvbnN0IGNoaWxkRXJyb3JzID0gdGhpcy5pc0FuY2VzdG9yT2ZGaWVsZEVycm9yKCk7XG4gICAgY29uc3QgaGFzRXJyb3JzID0gISFlcnJvcnMgfHwgY2hpbGRFcnJvcnM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENsYXNzTmFtZXM+XG4gICAgICAgIHsoeyBjc3MsIGN4IH0pID0+IChcbiAgICAgICAgICA8Q29udHJvbENvbnRhaW5lclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgJHtpc0hpZGRlbiAmJiBzdHlsZVN0cmluZ3MuaGlkZGVufTtcbiAgICAgICAgICAgIGB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3dpZGdldC5nbG9iYWxTdHlsZXMgJiYgPEdsb2JhbCBzdHlsZXM9e2NvcmVDc3NgJHt3aWRnZXQuZ2xvYmFsU3R5bGVzfWB9IC8+fVxuICAgICAgICAgICAge2Vycm9ycyAmJiAoXG4gICAgICAgICAgICAgIDxDb250cm9sRXJyb3JzTGlzdD5cbiAgICAgICAgICAgICAgICB7ZXJyb3JzLm1hcChcbiAgICAgICAgICAgICAgICAgIGVycm9yID0+XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGVycm9yLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIChcbiAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtlcnJvci5tZXNzYWdlLnRyaW0oKS5yZXBsYWNlKC9bXmEtejAtOV0rL2dpLCAnLScpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtlcnJvci5tZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9Db250cm9sRXJyb3JzTGlzdD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8TGFiZWxDb21wb25lbnRcbiAgICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17aXNTZWxlY3RlZCB8fCB0aGlzLnN0YXRlLnN0eWxlQWN0aXZlfVxuICAgICAgICAgICAgICBoYXNFcnJvcnM9e2hhc0Vycm9yc31cbiAgICAgICAgICAgICAgdW5pcXVlRmllbGRJZD17dGhpcy51bmlxdWVGaWVsZElkfVxuICAgICAgICAgICAgICBpc0ZpZWxkT3B0aW9uYWw9e2lzRmllbGRPcHRpb25hbH1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8V2lkZ2V0XG4gICAgICAgICAgICAgIGNsYXNzTmFtZVdyYXBwZXI9e2N4KFxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLndpZGdldH07XG4gICAgICAgICAgICAgICAgYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBbY3NzYFxuICAgICAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy53aWRnZXRBY3RpdmV9O1xuICAgICAgICAgICAgICAgICAgYF06IGlzU2VsZWN0ZWQgfHwgdGhpcy5zdGF0ZS5zdHlsZUFjdGl2ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFtjc3NgXG4gICAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLndpZGdldEVycm9yfTtcbiAgICAgICAgICAgICAgICAgIGBdOiBoYXNFcnJvcnMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBbY3NzYFxuICAgICAgICAgICAgICAgICAgICAke3N0eWxlU3RyaW5ncy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgIGBdOiBpc0Rpc2FibGVkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZVdpZGdldD17Y3NzYFxuICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLndpZGdldH07XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZVdpZGdldEFjdGl2ZT17Y3NzYFxuICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLndpZGdldEFjdGl2ZX07XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZUxhYmVsPXtjc3NgXG4gICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3MubGFiZWx9O1xuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICBjbGFzc05hbWVMYWJlbEFjdGl2ZT17Y3NzYFxuICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLmxhYmVsQWN0aXZlfTtcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgY29udHJvbENvbXBvbmVudD17d2lkZ2V0LmNvbnRyb2x9XG4gICAgICAgICAgICAgIGVudHJ5PXtlbnRyeX1cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgY29uZmlnPXtjb25maWd9XG4gICAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgICAgdW5pcXVlRmllbGRJZD17dGhpcy51bmlxdWVGaWVsZElkfVxuICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgIG1lZGlhUGF0aHM9e21lZGlhUGF0aHN9XG4gICAgICAgICAgICAgIG1ldGFkYXRhPXttZXRhZGF0YX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhuZXdWYWx1ZSwgbmV3TWV0YWRhdGEpID0+IG9uQ2hhbmdlKGZpZWxkLCBuZXdWYWx1ZSwgbmV3TWV0YWRhdGEpfVxuICAgICAgICAgICAgICBvblZhbGlkYXRlPXtvblZhbGlkYXRlICYmIHBhcnRpYWwob25WYWxpZGF0ZSwgdGhpcy51bmlxdWVGaWVsZElkKX1cbiAgICAgICAgICAgICAgb25PcGVuTWVkaWFMaWJyYXJ5PXtvcGVuTWVkaWFMaWJyYXJ5fVxuICAgICAgICAgICAgICBvbkNsZWFyTWVkaWFDb250cm9sPXtjbGVhck1lZGlhQ29udHJvbH1cbiAgICAgICAgICAgICAgb25SZW1vdmVNZWRpYUNvbnRyb2w9e3JlbW92ZU1lZGlhQ29udHJvbH1cbiAgICAgICAgICAgICAgb25SZW1vdmVJbnNlcnRlZE1lZGlhPXtyZW1vdmVJbnNlcnRlZE1lZGlhfVxuICAgICAgICAgICAgICBvblBlcnNpc3RNZWRpYT17cGVyc2lzdE1lZGlhfVxuICAgICAgICAgICAgICBvbkFkZEFzc2V0PXthZGRBc3NldH1cbiAgICAgICAgICAgICAgZ2V0QXNzZXQ9e2JvdW5kR2V0QXNzZXR9XG4gICAgICAgICAgICAgIGhhc0FjdGl2ZVN0eWxlPXtpc1NlbGVjdGVkIHx8IHRoaXMuc3RhdGUuc3R5bGVBY3RpdmV9XG4gICAgICAgICAgICAgIHNldEFjdGl2ZVN0eWxlPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc3R5bGVBY3RpdmU6IHRydWUgfSl9XG4gICAgICAgICAgICAgIHNldEluYWN0aXZlU3R5bGU9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBzdHlsZUFjdGl2ZTogZmFsc2UgfSl9XG4gICAgICAgICAgICAgIHJlc29sdmVXaWRnZXQ9e3Jlc29sdmVXaWRnZXR9XG4gICAgICAgICAgICAgIHdpZGdldD17d2lkZ2V0fVxuICAgICAgICAgICAgICBnZXRFZGl0b3JDb21wb25lbnRzPXtnZXRFZGl0b3JDb21wb25lbnRzfVxuICAgICAgICAgICAgICByZWY9e3Byb2Nlc3NDb250cm9sUmVmICYmIHBhcnRpYWwocHJvY2Vzc0NvbnRyb2xSZWYsIGZpZWxkKX1cbiAgICAgICAgICAgICAgY29udHJvbFJlZj17Y29udHJvbFJlZn1cbiAgICAgICAgICAgICAgZWRpdG9yQ29udHJvbD17Q29ubmVjdGVkRWRpdG9yQ29udHJvbH1cbiAgICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgICBsb2FkRW50cnk9e2xvYWRFbnRyeX1cbiAgICAgICAgICAgICAgcXVlcnlIaXRzPXtxdWVyeUhpdHNbdGhpcy51bmlxdWVGaWVsZElkXSB8fCBbXX1cbiAgICAgICAgICAgICAgY2xlYXJTZWFyY2g9e2NsZWFyU2VhcmNofVxuICAgICAgICAgICAgICBjbGVhckZpZWxkRXJyb3JzPXtjbGVhckZpZWxkRXJyb3JzfVxuICAgICAgICAgICAgICBpc0ZldGNoaW5nPXtpc0ZldGNoaW5nfVxuICAgICAgICAgICAgICBmaWVsZHNFcnJvcnM9e2ZpZWxkc0Vycm9yc31cbiAgICAgICAgICAgICAgb25WYWxpZGF0ZU9iamVjdD17b25WYWxpZGF0ZU9iamVjdH1cbiAgICAgICAgICAgICAgaXNFZGl0b3JDb21wb25lbnQ9e2lzRWRpdG9yQ29tcG9uZW50fVxuICAgICAgICAgICAgICBpc05ld0VkaXRvckNvbXBvbmVudD17aXNOZXdFZGl0b3JDb21wb25lbnR9XG4gICAgICAgICAgICAgIHBhcmVudElkcz17cGFyZW50SWRzfVxuICAgICAgICAgICAgICB0PXt0fVxuICAgICAgICAgICAgICB2YWxpZGF0ZU1ldGFGaWVsZD17dmFsaWRhdGVNZXRhRmllbGR9XG4gICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICAgICAgICAgIGlzRmllbGREdXBsaWNhdGU9e2lzRmllbGREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIGlzRmllbGRIaWRkZW49e2lzRmllbGRIaWRkZW59XG4gICAgICAgICAgICAgIGlzTG9hZGluZ0Fzc2V0PXtpc0xvYWRpbmdBc3NldH1cbiAgICAgICAgICAgICAgbG9jYWxlPXtsb2NhbGV9XG4gICAgICAgICAgICAgIGlzUGFyZW50TGlzdENvbGxhcHNlZD17aXNQYXJlbnRMaXN0Q29sbGFwc2VkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtmaWVsZEhpbnQgJiYgKFxuICAgICAgICAgICAgICA8Q29udHJvbEhpbnQgYWN0aXZlPXtpc1NlbGVjdGVkIHx8IHRoaXMuc3RhdGUuc3R5bGVBY3RpdmV9IGVycm9yPXtoYXNFcnJvcnN9PlxuICAgICAgICAgICAgICAgIDxSZWFjdE1hcmtkb3duXG4gICAgICAgICAgICAgICAgICByZW1hcmtQbHVnaW5zPXtbZ2ZtXX1cbiAgICAgICAgICAgICAgICAgIGFsbG93ZWRFbGVtZW50cz17WydhJywgJ3N0cm9uZycsICdlbScsICdkZWwnXX1cbiAgICAgICAgICAgICAgICAgIHVud3JhcERpc2FsbG93ZWQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICBjb21wb25lbnRzPXt7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICAgICAgICAgICAgICBhOiAoeyBub2RlLCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiAnaW5oZXJpdCcgfX1cbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7ZmllbGRIaW50fVxuICAgICAgICAgICAgICAgIDwvUmVhY3RNYXJrZG93bj5cbiAgICAgICAgICAgICAgPC9Db250cm9sSGludD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Db250cm9sQ29udGFpbmVyPlxuICAgICAgICApfVxuICAgICAgPC9DbGFzc05hbWVzPlxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMsIGVudHJ5RHJhZnQgfSA9IHN0YXRlO1xuICBjb25zdCBlbnRyeSA9IGVudHJ5RHJhZnQuZ2V0KCdlbnRyeScpO1xuICBjb25zdCBjb2xsZWN0aW9uID0gY29sbGVjdGlvbnMuZ2V0KGVudHJ5RHJhZnQuZ2V0SW4oWydlbnRyeScsICdjb2xsZWN0aW9uJ10pKTtcbiAgY29uc3QgaXNMb2FkaW5nQXNzZXQgPSBzZWxlY3RJc0xvYWRpbmdBc3NldChzdGF0ZS5tZWRpYXMpO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRFbnRyeShjb2xsZWN0aW9uTmFtZSwgc2x1Zykge1xuICAgIGNvbnN0IHRhcmdldENvbGxlY3Rpb24gPSBjb2xsZWN0aW9ucy5nZXQoY29sbGVjdGlvbk5hbWUpO1xuICAgIGlmICh0YXJnZXRDb2xsZWN0aW9uKSB7XG4gICAgICBjb25zdCBsb2FkZWRFbnRyeSA9IGF3YWl0IHRyeUxvYWRFbnRyeShzdGF0ZSwgdGFyZ2V0Q29sbGVjdGlvbiwgc2x1Zyk7XG4gICAgICByZXR1cm4gbG9hZGVkRW50cnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBjb2xsZWN0aW9uICcke2NvbGxlY3Rpb25OYW1lfSdgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1lZGlhUGF0aHM6IHN0YXRlLm1lZGlhTGlicmFyeS5nZXQoJ2NvbnRyb2xNZWRpYScpLFxuICAgIGlzRmV0Y2hpbmc6IHN0YXRlLnNlYXJjaC5pc0ZldGNoaW5nLFxuICAgIHF1ZXJ5SGl0czogc3RhdGUuc2VhcmNoLnF1ZXJ5SGl0cyxcbiAgICBjb25maWc6IHN0YXRlLmNvbmZpZyxcbiAgICBlbnRyeSxcbiAgICBjb2xsZWN0aW9uLFxuICAgIGlzTG9hZGluZ0Fzc2V0LFxuICAgIGxvYWRFbnRyeSxcbiAgICB2YWxpZGF0ZU1ldGFGaWVsZDogKGZpZWxkLCB2YWx1ZSwgdCkgPT4gdmFsaWRhdGVNZXRhRmllbGQoc3RhdGUsIGNvbGxlY3Rpb24sIGZpZWxkLCB2YWx1ZSwgdCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICBjb25zdCBjcmVhdG9ycyA9IGJpbmRBY3Rpb25DcmVhdG9ycyhcbiAgICB7XG4gICAgICBvcGVuTWVkaWFMaWJyYXJ5LFxuICAgICAgY2xlYXJNZWRpYUNvbnRyb2wsXG4gICAgICByZW1vdmVNZWRpYUNvbnRyb2wsXG4gICAgICByZW1vdmVJbnNlcnRlZE1lZGlhLFxuICAgICAgcGVyc2lzdE1lZGlhLFxuICAgICAgYWRkQXNzZXQsXG4gICAgICBxdWVyeSxcbiAgICAgIGNsZWFyU2VhcmNoLFxuICAgICAgY2xlYXJGaWVsZEVycm9ycyxcbiAgICB9LFxuICAgIGRpc3BhdGNoLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLmNyZWF0b3JzLFxuICAgIGJvdW5kR2V0QXNzZXQ6IChjb2xsZWN0aW9uLCBlbnRyeSkgPT4gYm91bmRHZXRBc3NldChkaXNwYXRjaCwgY29sbGVjdGlvbiwgZW50cnkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGJvdW5kR2V0QXNzZXQ6IGRpc3BhdGNoUHJvcHMuYm91bmRHZXRBc3NldChzdGF0ZVByb3BzLmNvbGxlY3Rpb24sIHN0YXRlUHJvcHMuZW50cnkpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRFZGl0b3JDb250cm9sID0gY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHMsXG4gIG1lcmdlUHJvcHMsXG4pKHRyYW5zbGF0ZSgpKEVkaXRvckNvbnRyb2wpKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRWRpdG9yQ29udHJvbDtcbiJdfQ== */"))
    }), errors && (0, _react2.jsx)(ControlErrorsList, null, errors.map(error => error.message && typeof error.message === 'string' && (0, _react2.jsx)("li", {
      key: error.message.trim().replace(/[^a-z0-9]+/gi, '-')
    }, error.message))), (0, _react2.jsx)(LabelComponent, {
      field: field,
      isActive: isSelected || this.state.styleActive,
      hasErrors: hasErrors,
      uniqueFieldId: this.uniqueFieldId,
      isFieldOptional: isFieldOptional,
      t: t
    }), (0, _react2.jsx)(_Widget.default, {
      classNameWrapper: cx(css`
                  ${styleStrings.widget};
                `, {
        [css`
                    ${styleStrings.widgetActive};
                  `]: isSelected || this.state.styleActive
      }, {
        [css`
                    ${styleStrings.widgetError};
                  `]: hasErrors
      }, {
        [css`
                    ${styleStrings.disabled}
                  `]: isDisabled
      }),
      classNameWidget: css`
                ${styleStrings.widget};
              `,
      classNameWidgetActive: css`
                ${styleStrings.widgetActive};
              `,
      classNameLabel: css`
                ${styleStrings.label};
              `,
      classNameLabelActive: css`
                ${styleStrings.labelActive};
              `,
      controlComponent: widget.control,
      entry: entry,
      collection: collection,
      config: config,
      field: field,
      uniqueFieldId: this.uniqueFieldId,
      value: value,
      mediaPaths: mediaPaths,
      metadata: metadata,
      onChange: (newValue, newMetadata) => onChange(field, newValue, newMetadata),
      onValidate: onValidate && (0, _partial2.default)(onValidate, this.uniqueFieldId),
      onOpenMediaLibrary: openMediaLibrary,
      onClearMediaControl: clearMediaControl,
      onRemoveMediaControl: removeMediaControl,
      onRemoveInsertedMedia: removeInsertedMedia,
      onPersistMedia: persistMedia,
      onAddAsset: addAsset,
      getAsset: boundGetAsset,
      hasActiveStyle: isSelected || this.state.styleActive,
      setActiveStyle: () => this.setState({
        styleActive: true
      }),
      setInactiveStyle: () => this.setState({
        styleActive: false
      }),
      resolveWidget: _registry.resolveWidget,
      widget: widget,
      getEditorComponents: _registry.getEditorComponents,
      ref: processControlRef && (0, _partial2.default)(processControlRef, field),
      controlRef: controlRef,
      editorControl: ConnectedEditorControl,
      query: query,
      loadEntry: loadEntry,
      queryHits: queryHits[this.uniqueFieldId] || [],
      clearSearch: clearSearch,
      clearFieldErrors: clearFieldErrors,
      isFetching: isFetching,
      fieldsErrors: fieldsErrors,
      onValidateObject: onValidateObject,
      isEditorComponent: isEditorComponent,
      isNewEditorComponent: isNewEditorComponent,
      parentIds: parentIds,
      t: t,
      validateMetaField: validateMetaField,
      isDisabled: isDisabled,
      isFieldDuplicate: isFieldDuplicate,
      isFieldHidden: isFieldHidden,
      isLoadingAsset: isLoadingAsset,
      locale: locale,
      isParentListCollapsed: isParentListCollapsed
    }), fieldHint && (0, _react2.jsx)(ControlHint, {
      active: isSelected || this.state.styleActive,
      error: hasErrors
    }, (0, _react2.jsx)(_reactMarkdown.default, {
      remarkPlugins: [_remarkGfm.default],
      allowedElements: ['a', 'strong', 'em', 'del'],
      unwrapDisallowed: true,
      components: {
        // eslint-disable-next-line no-unused-vars
        a: _ref => {
          let {
              node
            } = _ref,
            props = _objectWithoutProperties(_ref, _excluded);
          return (0, _react2.jsx)("a", _extends({}, props, {
            target: "_blank",
            rel: "noopener noreferrer",
            style: {
              color: 'inherit'
            }
          }));
        }
      }
    }, fieldHint))));
  }
}
_defineProperty(EditorControl, "propTypes", {
  value: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
  field: _reactImmutableProptypes.default.map.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map,
  fieldsErrors: _reactImmutableProptypes.default.map,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  boundGetAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  openMediaLibrary: _propTypes.default.func.isRequired,
  addAsset: _propTypes.default.func.isRequired,
  removeInsertedMedia: _propTypes.default.func.isRequired,
  persistMedia: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func,
  processControlRef: _propTypes.default.func,
  controlRef: _propTypes.default.func,
  query: _propTypes.default.func.isRequired,
  queryHits: _propTypes.default.object,
  isFetching: _propTypes.default.bool,
  clearSearch: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  loadEntry: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  isEditorComponent: _propTypes.default.bool,
  isNewEditorComponent: _propTypes.default.bool,
  parentIds: _propTypes.default.arrayOf(_propTypes.default.string),
  entry: _reactImmutableProptypes.default.map.isRequired,
  collection: _reactImmutableProptypes.default.map.isRequired,
  isDisabled: _propTypes.default.bool,
  isHidden: _propTypes.default.bool,
  isFieldDuplicate: _propTypes.default.func,
  isFieldHidden: _propTypes.default.func,
  locale: _propTypes.default.string,
  isParentListCollapsed: _propTypes.default.bool
});
_defineProperty(EditorControl, "defaultProps", {
  parentIds: []
});
function mapStateToProps(state) {
  const {
    collections,
    entryDraft
  } = state;
  const entry = entryDraft.get('entry');
  const collection = collections.get(entryDraft.getIn(['entry', 'collection']));
  const isLoadingAsset = (0, _medias.selectIsLoadingAsset)(state.medias);
  async function loadEntry(collectionName, slug) {
    const targetCollection = collections.get(collectionName);
    if (targetCollection) {
      const loadedEntry = await (0, _entries.tryLoadEntry)(state, targetCollection, slug);
      return loadedEntry;
    } else {
      throw new Error(`Can't find collection '${collectionName}'`);
    }
  }
  return {
    mediaPaths: state.mediaLibrary.get('controlMedia'),
    isFetching: state.search.isFetching,
    queryHits: state.search.queryHits,
    config: state.config,
    entry,
    collection,
    isLoadingAsset,
    loadEntry,
    validateMetaField: (field, value, t) => (0, _entries.validateMetaField)(state, collection, field, value, t)
  };
}
function mapDispatchToProps(dispatch) {
  const creators = (0, _redux.bindActionCreators)({
    openMediaLibrary: _mediaLibrary.openMediaLibrary,
    clearMediaControl: _mediaLibrary.clearMediaControl,
    removeMediaControl: _mediaLibrary.removeMediaControl,
    removeInsertedMedia: _mediaLibrary.removeInsertedMedia,
    persistMedia: _mediaLibrary.persistMedia,
    addAsset: _media.addAsset,
    query: _search.query,
    clearSearch: _search.clearSearch,
    clearFieldErrors: _entries.clearFieldErrors
  }, dispatch);
  return _objectSpread(_objectSpread({}, creators), {}, {
    boundGetAsset: (collection, entry) => (0, _media.boundGetAsset)(dispatch, collection, entry)
  });
}
function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, stateProps), dispatchProps), ownProps), {}, {
    boundGetAsset: dispatchProps.boundGetAsset(stateProps.collection, stateProps.entry)
  });
}
const ConnectedEditorControl = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)((0, _reactPolyglot.translate)()(EditorControl));
var _default = exports.default = ConnectedEditorControl;