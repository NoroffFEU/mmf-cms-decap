"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = _interopRequireDefault(require("@emotion/styled/base"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _reactPolyglot = require("react-polyglot");
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _reactTopbarProgressIndicator = _interopRequireDefault(require("react-topbar-progress-indicator"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _auth = require("../../actions/auth");
var _backend = require("../../backend");
var _collections = require("../../actions/collections");
var _mediaLibrary = require("../../actions/mediaLibrary");
var _MediaLibrary = _interopRequireDefault(require("../MediaLibrary/MediaLibrary"));
var _UI = require("../UI");
var _history = require("../../routing/history");
var _publishModes = require("../../constants/publishModes");
var _Collection = _interopRequireDefault(require("../Collection/Collection"));
var _Workflow = _interopRequireDefault(require("../Workflow/Workflow"));
var _Editor = _interopRequireDefault(require("../Editor/Editor"));
var _NotFoundPage = _interopRequireDefault(require("./NotFoundPage"));
var _Header = _interopRequireDefault(require("./Header"));
var _react2 = require("@emotion/react");
const _excluded = ["collections", "render"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
_reactTopbarProgressIndicator.default.config({
  barColors: {
    0: _decapCmsUiDefault.colors.active,
    '1.0': _decapCmsUiDefault.colors.active
  },
  shadowBlur: 0,
  barThickness: 2
});
const AppMainContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "eh2m33j2",
  label: "AppMainContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "y0stlg",
  styles: "min-width:800px;max-width:1440px;margin:0 auto"
} : {
  name: "y0stlg",
  styles: "min-width:800px;max-width:1440px;margin:0 auto",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorContainer = /*#__PURE__*/(0, _base.default)("div", {
  target: "eh2m33j1",
  label: "ErrorContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "3zy121",
  styles: "margin:20px"
} : {
  name: "3zy121",
  styles: "margin:20px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorCodeBlock = /*#__PURE__*/(0, _base.default)("pre", {
  target: "eh2m33j0",
  label: "ErrorCodeBlock"
})(process.env.NODE_ENV === "production" ? {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5"
} : {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9BcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkNpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IFJvdXRlLCBTd2l0Y2gsIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgVG9wQmFyUHJvZ3Jlc3MgZnJvbSAncmVhY3QtdG9wYmFyLXByb2dyZXNzLWluZGljYXRvcic7XG5pbXBvcnQgeyBMb2FkZXIsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgbG9naW5Vc2VyLCBsb2dvdXRVc2VyIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9hdXRoJztcbmltcG9ydCB7IGN1cnJlbnRCYWNrZW5kIH0gZnJvbSAnLi4vLi4vYmFja2VuZCc7XG5pbXBvcnQgeyBjcmVhdGVOZXdFbnRyeSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgb3Blbk1lZGlhTGlicmFyeSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvbWVkaWFMaWJyYXJ5JztcbmltcG9ydCBNZWRpYUxpYnJhcnkgZnJvbSAnLi4vTWVkaWFMaWJyYXJ5L01lZGlhTGlicmFyeSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zIH0gZnJvbSAnLi4vVUknO1xuaW1wb3J0IHsgaGlzdG9yeSB9IGZyb20gJy4uLy4uL3JvdXRpbmcvaGlzdG9yeSc7XG5pbXBvcnQgeyBTSU1QTEUsIEVESVRPUklBTF9XT1JLRkxPVyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnLi4vQ29sbGVjdGlvbi9Db2xsZWN0aW9uJztcbmltcG9ydCBXb3JrZmxvdyBmcm9tICcuLi9Xb3JrZmxvdy9Xb3JrZmxvdyc7XG5pbXBvcnQgRWRpdG9yIGZyb20gJy4uL0VkaXRvci9FZGl0b3InO1xuaW1wb3J0IE5vdEZvdW5kUGFnZSBmcm9tICcuL05vdEZvdW5kUGFnZSc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyJztcblxuVG9wQmFyUHJvZ3Jlc3MuY29uZmlnKHtcbiAgYmFyQ29sb3JzOiB7XG4gICAgMDogY29sb3JzLmFjdGl2ZSxcbiAgICAnMS4wJzogY29sb3JzLmFjdGl2ZSxcbiAgfSxcbiAgc2hhZG93Qmx1cjogMCxcbiAgYmFyVGhpY2tuZXNzOiAyLFxufSk7XG5cbmNvbnN0IEFwcE1haW5Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtaW4td2lkdGg6IDgwMHB4O1xuICBtYXgtd2lkdGg6IDE0NDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBFcnJvckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbjogMjBweDtcbmA7XG5cbmNvbnN0IEVycm9yQ29kZUJsb2NrID0gc3R5bGVkLnByZWBcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIGZvbnQtc2l6ZTogMTVweDtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbmA7XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRQYXRoKGNvbGxlY3Rpb25zKSB7XG4gIGNvbnN0IGZpcnN0ID0gY29sbGVjdGlvbnMuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2hpZGUnKSAhPT0gdHJ1ZSkuZmlyc3QoKTtcbiAgaWYgKGZpcnN0KSB7XG4gICAgcmV0dXJuIGAvY29sbGVjdGlvbnMvJHtmaXJzdC5nZXQoJ25hbWUnKX1gO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgYSBub24gaGlkZGVuIGNvbGxlY3Rpb24nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBSb3V0ZUluQ29sbGVjdGlvbih7IGNvbGxlY3Rpb25zLCByZW5kZXIsIC4uLnByb3BzIH0pIHtcbiAgY29uc3QgZGVmYXVsdFBhdGggPSBnZXREZWZhdWx0UGF0aChjb2xsZWN0aW9ucyk7XG4gIHJldHVybiAoXG4gICAgPFJvdXRlXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICByZW5kZXI9e3JvdXRlUHJvcHMgPT4ge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uRXhpc3RzID0gY29sbGVjdGlvbnMuZ2V0KHJvdXRlUHJvcHMubWF0Y2gucGFyYW1zLm5hbWUpO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbkV4aXN0cyA/IHJlbmRlcihyb3V0ZVByb3BzKSA6IDxSZWRpcmVjdCB0bz17ZGVmYXVsdFBhdGh9IC8+O1xuICAgICAgfX1cbiAgICAvPlxuICApO1xufVxuXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGF1dGg6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb25maWc6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGxvZ2luVXNlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBsb2dvdXRVc2VyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBwdWJsaXNoTW9kZTogUHJvcFR5cGVzLm9uZU9mKFtTSU1QTEUsIEVESVRPUklBTF9XT1JLRkxPV10pLFxuICAgIHNpdGVJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB1c2VNZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5ib29sLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd01lZGlhQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbmZpZ0Vycm9yKGNvbmZpZykge1xuICAgIGNvbnN0IHQgPSB0aGlzLnByb3BzLnQ7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFcnJvckNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCdhcHAuYXBwLmVycm9ySGVhZGVyJyl9PC9oMT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8c3Ryb25nPnt0KCdhcHAuYXBwLmNvbmZpZ0Vycm9ycycpfTo8L3N0cm9uZz5cbiAgICAgICAgICA8RXJyb3JDb2RlQmxvY2s+e2NvbmZpZy5lcnJvcn08L0Vycm9yQ29kZUJsb2NrPlxuICAgICAgICAgIDxzcGFuPnt0KCdhcHAuYXBwLmNoZWNrQ29uZmlnWW1sJyl9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRXJyb3JDb250YWluZXI+XG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZUxvZ2luKGNyZWRlbnRpYWxzKSB7XG4gICAgdGhpcy5wcm9wcy5sb2dpblVzZXIoY3JlZGVudGlhbHMpO1xuICB9XG5cbiAgYXV0aGVudGljYXRpbmcoKSB7XG4gICAgY29uc3QgeyBhdXRoLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGJhY2tlbmQgPSBjdXJyZW50QmFja2VuZCh0aGlzLnByb3BzLmNvbmZpZyk7XG5cbiAgICBpZiAoYmFja2VuZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMT57dCgnYXBwLmFwcC53YWl0aW5nQmFja2VuZCcpfTwvaDE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPE5vdGlmaWNhdGlvbnMgLz5cbiAgICAgICAge1JlYWN0LmNyZWF0ZUVsZW1lbnQoYmFja2VuZC5hdXRoQ29tcG9uZW50KCksIHtcbiAgICAgICAgICBvbkxvZ2luOiB0aGlzLmhhbmRsZUxvZ2luLmJpbmQodGhpcyksXG4gICAgICAgICAgZXJyb3I6IGF1dGguZXJyb3IsXG4gICAgICAgICAgaW5Qcm9ncmVzczogYXV0aC5pc0ZldGNoaW5nLFxuICAgICAgICAgIHNpdGVJZDogdGhpcy5wcm9wcy5jb25maWcuYmFja2VuZC5zaXRlX2RvbWFpbixcbiAgICAgICAgICBiYXNlX3VybDogdGhpcy5wcm9wcy5jb25maWcuYmFja2VuZC5iYXNlX3VybCxcbiAgICAgICAgICBhdXRoRW5kcG9pbnQ6IHRoaXMucHJvcHMuY29uZmlnLmJhY2tlbmQuYXV0aF9lbmRwb2ludCxcbiAgICAgICAgICBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnLFxuICAgICAgICAgIGNsZWFySGFzaDogKCkgPT4gaGlzdG9yeS5yZXBsYWNlKCcvJyksXG4gICAgICAgICAgdCxcbiAgICAgICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaGFuZGxlTGlua0NsaWNrKGV2ZW50LCBoYW5kbGVyLCAuLi5hcmdzKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBoYW5kbGVyKC4uLmFyZ3MpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXIsXG4gICAgICBjb25maWcsXG4gICAgICBjb2xsZWN0aW9ucyxcbiAgICAgIGxvZ291dFVzZXIsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgcHVibGlzaE1vZGUsXG4gICAgICB1c2VNZWRpYUxpYnJhcnksXG4gICAgICBvcGVuTWVkaWFMaWJyYXJ5LFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChjb25maWcgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuZXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZ0Vycm9yKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5pc0ZldGNoaW5nKSB7XG4gICAgICByZXR1cm4gPExvYWRlciBhY3RpdmU+e3QoJ2FwcC5hcHAubG9hZGluZ0NvbmZpZycpfTwvTG9hZGVyPjtcbiAgICB9XG5cbiAgICBpZiAodXNlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdXRoZW50aWNhdGluZyh0KTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0UGF0aCA9IGdldERlZmF1bHRQYXRoKGNvbGxlY3Rpb25zKTtcbiAgICBjb25zdCBoYXNXb3JrZmxvdyA9IHB1Ymxpc2hNb2RlID09PSBFRElUT1JJQUxfV09SS0ZMT1c7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPE5vdGlmaWNhdGlvbnMgLz5cbiAgICAgICAgPEhlYWRlclxuICAgICAgICAgIHVzZXI9e3VzZXJ9XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgIG9uQ3JlYXRlRW50cnlDbGljaz17Y3JlYXRlTmV3RW50cnl9XG4gICAgICAgICAgb25Mb2dvdXRDbGljaz17bG9nb3V0VXNlcn1cbiAgICAgICAgICBvcGVuTWVkaWFMaWJyYXJ5PXtvcGVuTWVkaWFMaWJyYXJ5fVxuICAgICAgICAgIGhhc1dvcmtmbG93PXtoYXNXb3JrZmxvd31cbiAgICAgICAgICBkaXNwbGF5VXJsPXtjb25maWcuZGlzcGxheV91cmx9XG4gICAgICAgICAgaXNUZXN0UmVwbz17Y29uZmlnLmJhY2tlbmQubmFtZSA9PT0gJ3Rlc3QtcmVwbyd9XG4gICAgICAgICAgc2hvd01lZGlhQnV0dG9uPXtzaG93TWVkaWFCdXR0b259XG4gICAgICAgIC8+XG4gICAgICAgIDxBcHBNYWluQ29udGFpbmVyPlxuICAgICAgICAgIHtpc0ZldGNoaW5nICYmIDxUb3BCYXJQcm9ncmVzcyAvPn1cbiAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgPFJlZGlyZWN0IGV4YWN0IGZyb209XCIvXCIgdG89e2RlZmF1bHRQYXRofSAvPlxuICAgICAgICAgICAgPFJlZGlyZWN0IGV4YWN0IGZyb209XCIvc2VhcmNoL1wiIHRvPXtkZWZhdWx0UGF0aH0gLz5cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBleGFjdFxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHBhdGg9XCIvY29sbGVjdGlvbnMvOm5hbWUvc2VhcmNoL1wiXG4gICAgICAgICAgICAgIHJlbmRlcj17KHsgbWF0Y2ggfSkgPT4gPFJlZGlyZWN0IHRvPXtgL2NvbGxlY3Rpb25zLyR7bWF0Y2gucGFyYW1zLm5hbWV9YH0gLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJlZGlyZWN0XG4gICAgICAgICAgICAgIC8vIFRoaXMgaGFwcGVucyBvbiBJZGVudGl0eSArIEludml0ZSBPbmx5ICsgRXh0ZXJuYWwgUHJvdmlkZXIgZW1haWwgbm90IG1hdGNoaW5nXG4gICAgICAgICAgICAgIC8vIHRoZSByZWdpc3RlcmVkIHVzZXJcbiAgICAgICAgICAgICAgZnJvbT1cIi9lcnJvcj1hY2Nlc3NfZGVuaWVkJmVycm9yX2Rlc2NyaXB0aW9uPVNpZ251cHMrbm90K2FsbG93ZWQrZm9yK3RoaXMraW5zdGFuY2VcIlxuICAgICAgICAgICAgICB0bz17ZGVmYXVsdFBhdGh9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2hhc1dvcmtmbG93ID8gPFJvdXRlIHBhdGg9XCIvd29ya2Zsb3dcIiBjb21wb25lbnQ9e1dvcmtmbG93fSAvPiA6IG51bGx9XG4gICAgICAgICAgICA8Um91dGVJbkNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgZXhhY3RcbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lXCJcbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8Q29sbGVjdGlvbiB7Li4ucHJvcHN9IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL25ld1wiXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8RWRpdG9yIHsuLi5wcm9wc30gbmV3UmVjb3JkIC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBwYXRoPVwiL2NvbGxlY3Rpb25zLzpuYW1lL2VudHJpZXMvKlwiXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcmVuZGVyPXtwcm9wcyA9PiA8RWRpdG9yIHsuLi5wcm9wc30gLz59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFJvdXRlSW5Db2xsZWN0aW9uXG4gICAgICAgICAgICAgIHBhdGg9XCIvY29sbGVjdGlvbnMvOm5hbWUvc2VhcmNoLzpzZWFyY2hUZXJtXCJcbiAgICAgICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICByZW5kZXI9e3Byb3BzID0+IDxDb2xsZWN0aW9uIHsuLi5wcm9wc30gaXNTZWFyY2hSZXN1bHRzIGlzU2luZ2xlU2VhcmNoUmVzdWx0IC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgICAgIHBhdGg9XCIvY29sbGVjdGlvbnMvOm5hbWUvZmlsdGVyLzpmaWx0ZXJUZXJtKlwiXG4gICAgICAgICAgICAgIHJlbmRlcj17cHJvcHMgPT4gPENvbGxlY3Rpb24gey4uLnByb3BzfSAvPn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGVcbiAgICAgICAgICAgICAgcGF0aD1cIi9zZWFyY2gvOnNlYXJjaFRlcm1cIlxuICAgICAgICAgICAgICByZW5kZXI9e3Byb3BzID0+IDxDb2xsZWN0aW9uIHsuLi5wcm9wc30gaXNTZWFyY2hSZXN1bHRzIC8+fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZUluQ29sbGVjdGlvblxuICAgICAgICAgICAgICBwYXRoPVwiL2VkaXQvOm5hbWUvOmVudHJ5TmFtZVwiXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgcmVuZGVyPXsoeyBtYXRjaCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBlbnRyeU5hbWUgfSA9IG1hdGNoLnBhcmFtcztcbiAgICAgICAgICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPXtgL2NvbGxlY3Rpb25zLyR7bmFtZX0vZW50cmllcy8ke2VudHJ5TmFtZX1gfSAvPjtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Um91dGUgY29tcG9uZW50PXtOb3RGb3VuZFBhZ2V9IC8+XG4gICAgICAgICAgPC9Td2l0Y2g+XG4gICAgICAgICAge3VzZU1lZGlhTGlicmFyeSA/IDxNZWRpYUxpYnJhcnkgLz4gOiBudWxsfVxuICAgICAgICA8L0FwcE1haW5Db250YWluZXI+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICBjb25zdCB7IGF1dGgsIGNvbmZpZywgY29sbGVjdGlvbnMsIGdsb2JhbFVJLCBtZWRpYUxpYnJhcnkgfSA9IHN0YXRlO1xuICBjb25zdCB1c2VyID0gYXV0aC51c2VyO1xuICBjb25zdCBpc0ZldGNoaW5nID0gZ2xvYmFsVUkuaXNGZXRjaGluZztcbiAgY29uc3QgcHVibGlzaE1vZGUgPSBjb25maWcucHVibGlzaF9tb2RlO1xuICBjb25zdCB1c2VNZWRpYUxpYnJhcnkgPSAhbWVkaWFMaWJyYXJ5LmdldCgnZXh0ZXJuYWxMaWJyYXJ5Jyk7XG4gIGNvbnN0IHNob3dNZWRpYUJ1dHRvbiA9IG1lZGlhTGlicmFyeS5nZXQoJ3Nob3dNZWRpYUJ1dHRvbicpO1xuICByZXR1cm4ge1xuICAgIGF1dGgsXG4gICAgY29uZmlnLFxuICAgIGNvbGxlY3Rpb25zLFxuICAgIHVzZXIsXG4gICAgaXNGZXRjaGluZyxcbiAgICBwdWJsaXNoTW9kZSxcbiAgICBzaG93TWVkaWFCdXR0b24sXG4gICAgdXNlTWVkaWFMaWJyYXJ5LFxuICB9O1xufVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIG9wZW5NZWRpYUxpYnJhcnksXG4gIGxvZ2luVXNlcixcbiAgbG9nb3V0VXNlcixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKHRyYW5zbGF0ZSgpKEFwcCkpO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function getDefaultPath(collections) {
  const first = collections.filter(collection => collection.get('hide') !== true).first();
  if (first) {
    return `/collections/${first.get('name')}`;
  } else {
    throw new Error('Could not find a non hidden collection');
  }
}
function RouteInCollection(_ref) {
  let {
      collections,
      render
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const defaultPath = getDefaultPath(collections);
  return (0, _react2.jsx)(_reactRouterDom.Route, _extends({}, props, {
    render: routeProps => {
      const collectionExists = collections.get(routeProps.match.params.name);
      return collectionExists ? render(routeProps) : (0, _react2.jsx)(_reactRouterDom.Redirect, {
        to: defaultPath
      });
    }
  }));
}
class App extends _react.default.Component {
  configError(config) {
    const t = this.props.t;
    return (0, _react2.jsx)(ErrorContainer, null, (0, _react2.jsx)("h1", null, t('app.app.errorHeader')), (0, _react2.jsx)("div", null, (0, _react2.jsx)("strong", null, t('app.app.configErrors'), ":"), (0, _react2.jsx)(ErrorCodeBlock, null, config.error), (0, _react2.jsx)("span", null, t('app.app.checkConfigYml'))));
  }
  handleLogin(credentials) {
    this.props.loginUser(credentials);
  }
  authenticating() {
    const {
      auth,
      t
    } = this.props;
    const backend = (0, _backend.currentBackend)(this.props.config);
    if (backend == null) {
      return (0, _react2.jsx)("div", null, (0, _react2.jsx)("h1", null, t('app.app.waitingBackend')));
    }
    return (0, _react2.jsx)("div", null, (0, _react2.jsx)(_UI.Notifications, null), /*#__PURE__*/_react.default.createElement(backend.authComponent(), {
      onLogin: this.handleLogin.bind(this),
      error: auth.error,
      inProgress: auth.isFetching,
      siteId: this.props.config.backend.site_domain,
      base_url: this.props.config.backend.base_url,
      authEndpoint: this.props.config.backend.auth_endpoint,
      config: this.props.config,
      clearHash: () => _history.history.replace('/'),
      t
    }));
  }
  handleLinkClick(event, handler, ...args) {
    event.preventDefault();
    handler(...args);
  }
  render() {
    const {
      user,
      config,
      collections,
      logoutUser,
      isFetching,
      publishMode,
      useMediaLibrary,
      openMediaLibrary,
      t,
      showMediaButton
    } = this.props;
    if (config === null) {
      return null;
    }
    if (config.error) {
      return this.configError(config);
    }
    if (config.isFetching) {
      return (0, _react2.jsx)(_decapCmsUiDefault.Loader, {
        active: true
      }, t('app.app.loadingConfig'));
    }
    if (user == null) {
      return this.authenticating(t);
    }
    const defaultPath = getDefaultPath(collections);
    const hasWorkflow = publishMode === _publishModes.EDITORIAL_WORKFLOW;
    return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_UI.Notifications, null), (0, _react2.jsx)(_Header.default, {
      user: user,
      collections: collections,
      onCreateEntryClick: _collections.createNewEntry,
      onLogoutClick: logoutUser,
      openMediaLibrary: openMediaLibrary,
      hasWorkflow: hasWorkflow,
      displayUrl: config.display_url,
      isTestRepo: config.backend.name === 'test-repo',
      showMediaButton: showMediaButton
    }), (0, _react2.jsx)(AppMainContainer, null, isFetching && (0, _react2.jsx)(_reactTopbarProgressIndicator.default, null), (0, _react2.jsx)(_reactRouterDom.Switch, null, (0, _react2.jsx)(_reactRouterDom.Redirect, {
      exact: true,
      from: "/",
      to: defaultPath
    }), (0, _react2.jsx)(_reactRouterDom.Redirect, {
      exact: true,
      from: "/search/",
      to: defaultPath
    }), (0, _react2.jsx)(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name/search/",
      render: ({
        match
      }) => (0, _react2.jsx)(_reactRouterDom.Redirect, {
        to: `/collections/${match.params.name}`
      })
    }), (0, _react2.jsx)(_reactRouterDom.Redirect
    // This happens on Identity + Invite Only + External Provider email not matching
    // the registered user
    , {
      from: "/error=access_denied&error_description=Signups+not+allowed+for+this+instance",
      to: defaultPath
    }), hasWorkflow ? (0, _react2.jsx)(_reactRouterDom.Route, {
      path: "/workflow",
      component: _Workflow.default
    }) : null, (0, _react2.jsx)(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name",
      render: props => (0, _react2.jsx)(_Collection.default, props)
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/new",
      collections: collections,
      render: props => (0, _react2.jsx)(_Editor.default, _extends({}, props, {
        newRecord: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/entries/*",
      collections: collections,
      render: props => (0, _react2.jsx)(_Editor.default, props)
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/collections/:name/search/:searchTerm",
      collections: collections,
      render: props => (0, _react2.jsx)(_Collection.default, _extends({}, props, {
        isSearchResults: true,
        isSingleSearchResult: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      collections: collections,
      path: "/collections/:name/filter/:filterTerm*",
      render: props => (0, _react2.jsx)(_Collection.default, props)
    }), (0, _react2.jsx)(_reactRouterDom.Route, {
      path: "/search/:searchTerm",
      render: props => (0, _react2.jsx)(_Collection.default, _extends({}, props, {
        isSearchResults: true
      }))
    }), (0, _react2.jsx)(RouteInCollection, {
      path: "/edit/:name/:entryName",
      collections: collections,
      render: ({
        match
      }) => {
        const {
          name,
          entryName
        } = match.params;
        return (0, _react2.jsx)(_reactRouterDom.Redirect, {
          to: `/collections/${name}/entries/${entryName}`
        });
      }
    }), (0, _react2.jsx)(_reactRouterDom.Route, {
      component: _NotFoundPage.default
    })), useMediaLibrary ? (0, _react2.jsx)(_MediaLibrary.default, null) : null));
  }
}
_defineProperty(App, "propTypes", {
  auth: _propTypes.default.object.isRequired,
  config: _propTypes.default.object.isRequired,
  collections: _reactImmutableProptypes.default.map.isRequired,
  loginUser: _propTypes.default.func.isRequired,
  logoutUser: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  isFetching: _propTypes.default.bool.isRequired,
  publishMode: _propTypes.default.oneOf([_publishModes.SIMPLE, _publishModes.EDITORIAL_WORKFLOW]),
  siteId: _propTypes.default.string,
  useMediaLibrary: _propTypes.default.bool,
  openMediaLibrary: _propTypes.default.func.isRequired,
  showMediaButton: _propTypes.default.bool,
  t: _propTypes.default.func.isRequired
});
function mapStateToProps(state) {
  const {
    auth,
    config,
    collections,
    globalUI,
    mediaLibrary
  } = state;
  const user = auth.user;
  const isFetching = globalUI.isFetching;
  const publishMode = config.publish_mode;
  const useMediaLibrary = !mediaLibrary.get('externalLibrary');
  const showMediaButton = mediaLibrary.get('showMediaButton');
  return {
    auth,
    config,
    collections,
    user,
    isFetching,
    publishMode,
    showMediaButton,
    useMediaLibrary
  };
}
const mapDispatchToProps = {
  openMediaLibrary: _mediaLibrary.openMediaLibrary,
  loginUser: _auth.loginUser,
  logoutUser: _auth.logoutUser
};
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _reactPolyglot.translate)()(App));