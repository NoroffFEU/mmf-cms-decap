"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PlateEditor;
var _react = _interopRequireDefault(require("react"));
require("./../style/output.css");
var _cn = require("@udecode/cn");
var _plateCommon = require("@udecode/plate-common");
var _plateParagraph = require("@udecode/plate-paragraph");
var _plateHeading = require("@udecode/plate-heading");
var _plateBlockQuote = require("@udecode/plate-block-quote");
var _plateCodeBlock = require("@udecode/plate-code-block");
var _plateLink = require("@udecode/plate-link");
var _plateList = require("@udecode/plate-list");
var _plateTable = require("@udecode/plate-table");
var _plateBasicMarks = require("@udecode/plate-basic-marks");
var _plateKbd = require("@udecode/plate-kbd");
var _plateSelection = require("@udecode/plate-selection");
var _plateResetNode = require("@udecode/plate-reset-node");
var _plateSelect = require("@udecode/plate-select");
var _plateBreak = require("@udecode/plate-break");
var _blockquoteElement = require("./../components/plate-ui/blockquote-element");
var _codeBlockElement = require("./../components/plate-ui/code-block-element");
var _codeLineElement = require("./../components/plate-ui/code-line-element");
var _codeSyntaxLeaf = require("./../components/plate-ui/code-syntax-leaf");
var _linkElement = require("./../components/plate-ui/link-element");
var _linkFloatingToolbar = require("./../components/plate-ui/link-floating-toolbar");
var _headingElement = require("./../components/plate-ui/heading-element");
var _listElement = require("./../components/plate-ui/list-element");
var _paragraphElement = require("./../components/plate-ui/paragraph-element");
var _tableElement = require("./../components/plate-ui/table-element");
var _tableRowElement = require("./../components/plate-ui/table-row-element");
var _tableCellElement = require("./../components/plate-ui/table-cell-element");
var _codeLeaf = require("./../components/plate-ui/code-leaf");
var _kbdLeaf = require("./../components/plate-ui/kbd-leaf");
var _editor = require("./../components/plate-ui/editor");
var _fixedToolbar = require("./../components/plate-ui/fixed-toolbar");
var _fixedToolbarButtons = require("./../components/plate-ui/fixed-toolbar-buttons");
var _floatingToolbar = require("./../components/plate-ui/floating-toolbar");
var _floatingToolbarButtons = require("./../components/plate-ui/floating-toolbar-buttons");
var _placeholder = require("./../components/plate-ui/placeholder");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const plugins = (0, _plateCommon.createPlugins)([(0, _plateParagraph.createParagraphPlugin)(), (0, _plateHeading.createHeadingPlugin)(), (0, _plateBlockQuote.createBlockquotePlugin)(), (0, _plateCodeBlock.createCodeBlockPlugin)(), (0, _plateLink.createLinkPlugin)({
  renderAfterEditable: _linkFloatingToolbar.LinkFloatingToolbar
}), (0, _plateList.createListPlugin)(), (0, _plateTable.createTablePlugin)(), (0, _plateBasicMarks.createBoldPlugin)(), (0, _plateBasicMarks.createItalicPlugin)(), (0, _plateBasicMarks.createUnderlinePlugin)(), (0, _plateBasicMarks.createStrikethroughPlugin)(), (0, _plateBasicMarks.createCodePlugin)(), (0, _plateKbd.createKbdPlugin)(), (0, _plateSelection.createBlockSelectionPlugin)({
  options: {
    sizes: {
      top: 0,
      bottom: 0
    }
  }
}), (0, _plateResetNode.createResetNodePlugin)({
  options: {
    rules: [
      // Usage: https://platejs.org/docs/reset-node
    ]
  }
}), (0, _plateSelect.createSelectOnBackspacePlugin)({
  options: {
    query: {
      allow: [
        // ELEMENT_IMAGE, ELEMENT_HR
      ]
    }
  }
}), (0, _plateSelect.createDeletePlugin)(), (0, _plateBreak.createSoftBreakPlugin)({
  options: {
    rules: [{
      hotkey: 'shift+enter'
    }, {
      hotkey: 'enter',
      query: {
        allow: [
          // ELEMENT_CODE_BLOCK, ELEMENT_BLOCKQUOTE, ELEMENT_TD
        ]
      }
    }]
  }
})], {
  components: (0, _placeholder.withPlaceholders)({
    [_plateBlockQuote.ELEMENT_BLOCKQUOTE]: _blockquoteElement.BlockquoteElement,
    [_plateCodeBlock.ELEMENT_CODE_BLOCK]: _codeBlockElement.CodeBlockElement,
    [_plateCodeBlock.ELEMENT_CODE_LINE]: _codeLineElement.CodeLineElement,
    [_plateCodeBlock.ELEMENT_CODE_SYNTAX]: _codeSyntaxLeaf.CodeSyntaxLeaf,
    [_plateLink.ELEMENT_LINK]: _linkElement.LinkElement,
    [_plateHeading.ELEMENT_H1]: (0, _cn.withProps)(_headingElement.HeadingElement, {
      variant: 'h1'
    }),
    [_plateHeading.ELEMENT_H2]: (0, _cn.withProps)(_headingElement.HeadingElement, {
      variant: 'h2'
    }),
    [_plateHeading.ELEMENT_H3]: (0, _cn.withProps)(_headingElement.HeadingElement, {
      variant: 'h3'
    }),
    [_plateHeading.ELEMENT_H4]: (0, _cn.withProps)(_headingElement.HeadingElement, {
      variant: 'h4'
    }),
    [_plateHeading.ELEMENT_H5]: (0, _cn.withProps)(_headingElement.HeadingElement, {
      variant: 'h5'
    }),
    [_plateHeading.ELEMENT_H6]: (0, _cn.withProps)(_headingElement.HeadingElement, {
      variant: 'h6'
    }),
    [_plateList.ELEMENT_UL]: (0, _cn.withProps)(_listElement.ListElement, {
      variant: 'ul'
    }),
    [_plateList.ELEMENT_OL]: (0, _cn.withProps)(_listElement.ListElement, {
      variant: 'ol'
    }),
    [_plateList.ELEMENT_LI]: (0, _cn.withProps)(_plateCommon.PlateElement, {
      as: 'li'
    }),
    [_plateParagraph.ELEMENT_PARAGRAPH]: _paragraphElement.ParagraphElement,
    [_plateTable.ELEMENT_TABLE]: _tableElement.TableElement,
    [_plateTable.ELEMENT_TR]: _tableRowElement.TableRowElement,
    [_plateTable.ELEMENT_TD]: _tableCellElement.TableCellElement,
    [_plateTable.ELEMENT_TH]: _tableCellElement.TableCellHeaderElement,
    [_plateBasicMarks.MARK_BOLD]: (0, _cn.withProps)(_plateCommon.PlateLeaf, {
      as: 'strong'
    }),
    [_plateBasicMarks.MARK_CODE]: _codeLeaf.CodeLeaf,
    [_plateBasicMarks.MARK_ITALIC]: (0, _cn.withProps)(_plateCommon.PlateLeaf, {
      as: 'em'
    }),
    [_plateKbd.MARK_KBD]: _kbdLeaf.KbdLeaf,
    [_plateBasicMarks.MARK_STRIKETHROUGH]: (0, _cn.withProps)(_plateCommon.PlateLeaf, {
      as: 's'
    }),
    [_plateBasicMarks.MARK_UNDERLINE]: (0, _cn.withProps)(_plateCommon.PlateLeaf, {
      as: 'u'
    })
  })
});
const initialValue = [{
  id: '1',
  type: 'p',
  children: [{
    text: 'Hello, World!'
  }]
}];
function PlateEditor() {
  return (0, _react2.jsx)(_plateCommon.Plate, {
    plugins: plugins,
    initialValue: initialValue
  }, (0, _react2.jsx)(_fixedToolbar.FixedToolbar, null, (0, _react2.jsx)(_fixedToolbarButtons.FixedToolbarButtons, null)), (0, _react2.jsx)(_editor.Editor, null), (0, _react2.jsx)(_floatingToolbar.FloatingToolbar, null, (0, _react2.jsx)(_floatingToolbarButtons.FloatingToolbarButtons, null)));
}