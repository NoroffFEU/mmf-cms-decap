"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mediaResizeHandleVariants = exports.ResizeHandle = exports.Resizable = void 0;
var _react = _interopRequireDefault(require("react"));
var _cn = require("@udecode/cn");
var _plateResizable = require("@udecode/plate-resizable");
var _classVarianceAuthority = require("class-variance-authority");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const mediaResizeHandleVariants = exports.mediaResizeHandleVariants = (0, _classVarianceAuthority.cva)((0, _cn.cn)('top-0 flex w-6 select-none flex-col justify-center', "after:flex after:h-16 after:w-[3px] after:rounded-[6px] after:bg-ring after:opacity-0 after:content-['_'] group-hover:after:opacity-100"), {
  variants: {
    direction: {
      left: '-left-3 -ml-3 pl-3',
      right: '-right-3 -mr-3 items-end pr-3'
    }
  }
});
const resizeHandleVariants = (0, _classVarianceAuthority.cva)((0, _cn.cn)('absolute z-40'), {
  variants: {
    direction: {
      left: 'h-full cursor-col-resize',
      right: 'h-full cursor-col-resize',
      top: 'w-full cursor-row-resize',
      bottom: 'w-full cursor-row-resize'
    }
  }
});
const ResizeHandleVariants = (0, _cn.withVariants)(_plateResizable.ResizeHandle, resizeHandleVariants, ['direction']);
const ResizeHandle = exports.ResizeHandle = (0, _cn.withRef)((props, ref) => {
  var _props$options;
  return (0, _react2.jsx)(ResizeHandleVariants, _extends({
    ref: ref,
    direction: (_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.direction
  }, props));
});
const resizableVariants = (0, _classVarianceAuthority.cva)('', {
  variants: {
    align: {
      left: 'mr-auto',
      center: 'mx-auto',
      right: 'ml-auto'
    }
  }
});
const Resizable = exports.Resizable = (0, _cn.withVariants)(_plateResizable.Resizable, resizableVariants, ['align']);