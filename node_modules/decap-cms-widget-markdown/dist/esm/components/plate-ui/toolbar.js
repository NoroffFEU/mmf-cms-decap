"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarToggleItem = exports.ToolbarToggleGroup = exports.ToolbarSeparator = exports.ToolbarLink = exports.ToolbarGroup = exports.ToolbarButton = exports.Toolbar = void 0;
var React = _interopRequireWildcard(require("react"));
var ToolbarPrimitive = _interopRequireWildcard(require("@radix-ui/react-toolbar"));
var _cn = require("@udecode/cn");
var _classVarianceAuthority = require("class-variance-authority");
var _icons = require("@/components/icons");
var _separator = require("./separator");
var _tooltip = require("./tooltip");
var _react2 = require("@emotion/react");
const _excluded = ["className", "variant", "size", "isDropdown", "children", "pressed"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const Toolbar = exports.Toolbar = (0, _cn.withCn)(ToolbarPrimitive.Root, 'relative flex select-none items-center gap-1 bg-background');
const ToolbarToggleGroup = exports.ToolbarToggleGroup = (0, _cn.withCn)(ToolbarPrimitive.ToolbarToggleGroup, 'flex items-center');
const ToolbarLink = exports.ToolbarLink = (0, _cn.withCn)(ToolbarPrimitive.Link, 'font-medium underline underline-offset-4');
const ToolbarSeparator = exports.ToolbarSeparator = (0, _cn.withCn)(ToolbarPrimitive.Separator, 'my-1 w-[1px] shrink-0 bg-border');
const toolbarButtonVariants = (0, _classVarianceAuthority.cva)((0, _cn.cn)('inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50', '[&_svg:not([data-icon])]:h-5 [&_svg:not([data-icon])]:w-5'), {
  variants: {
    variant: {
      default: 'bg-transparent hover:bg-muted hover:text-muted-foreground aria-checked:bg-accent aria-checked:text-accent-foreground',
      outline: 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground'
    },
    size: {
      default: 'h-10 px-3',
      sm: 'h-9 px-2',
      lg: 'h-11 px-5'
    }
  },
  defaultVariants: {
    variant: 'default',
    size: 'sm'
  }
});
const ToolbarButton = exports.ToolbarButton = (0, _tooltip.withTooltip)(
/*#__PURE__*/
// eslint-disable-next-line react/display-name
React.forwardRef((_ref, ref) => {
  let {
      className,
      variant,
      size,
      isDropdown,
      children,
      pressed
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  return typeof pressed === 'boolean' ? (0, _react2.jsx)(ToolbarToggleGroup, {
    type: "single",
    value: "single",
    disabled: props.disabled
  }, (0, _react2.jsx)(ToolbarToggleItem, _extends({
    ref: ref,
    className: (0, _cn.cn)(toolbarButtonVariants({
      variant,
      size
    }), isDropdown && 'my-1 justify-between pr-1', className),
    value: pressed ? 'single' : ''
  }, props), isDropdown ? (0, _react2.jsx)(React.Fragment, null, (0, _react2.jsx)("div", {
    className: "flex flex-1"
  }, children), (0, _react2.jsx)("div", null, (0, _react2.jsx)(_icons.Icons.arrowDown, {
    className: "ml-0.5 h-4 w-4",
    "data-icon": true
  }))) : children)) : (0, _react2.jsx)(ToolbarPrimitive.Button, _extends({
    ref: ref,
    className: (0, _cn.cn)(toolbarButtonVariants({
      variant,
      size
    }), isDropdown && 'pr-1', className)
  }, props), children);
}));
ToolbarButton.displayName = 'ToolbarButton';
const ToolbarToggleItem = exports.ToolbarToggleItem = (0, _cn.withVariants)(ToolbarPrimitive.ToggleItem, toolbarButtonVariants, ['variant', 'size']);
const ToolbarGroup = exports.ToolbarGroup = (0, _cn.withRef)(({
  className,
  children,
  noSeparator
}, ref) => {
  const childArr = React.Children.map(children, c => c);
  if (!childArr || childArr.length === 0) return null;
  return (0, _react2.jsx)("div", {
    ref: ref,
    className: (0, _cn.cn)('flex', className)
  }, !noSeparator && (0, _react2.jsx)("div", {
    className: "h-full py-1"
  }, (0, _react2.jsx)(_separator.Separator, {
    orientation: "vertical"
  })), (0, _react2.jsx)("div", {
    className: "mx-1 flex items-center gap-1"
  }, children));
});