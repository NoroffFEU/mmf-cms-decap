"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListElement = void 0;
var _react = _interopRequireDefault(require("react"));
var _cn = require("@udecode/cn");
var _plateCommon = require("@udecode/plate-common");
var _classVarianceAuthority = require("class-variance-authority");
var _react2 = require("@emotion/react");
const _excluded = ["children", "variant"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const listVariants = (0, _classVarianceAuthority.cva)('m-0 ps-6', {
  variants: {
    variant: {
      ul: 'list-disc [&_ul]:list-[circle] [&_ul_ul]:list-[square]',
      ol: 'list-decimal'
    }
  }
});
const ListElementVariants = (0, _cn.withVariants)(_plateCommon.PlateElement, listVariants, ['variant']);
const ListElement = exports.ListElement = (0, _cn.withRef)((_ref, ref) => {
  let {
      children,
      variant = 'ul'
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const Component = variant;
  return (0, _react2.jsx)(ListElementVariants, _extends({
    ref: ref,
    asChild: true,
    variant: variant
  }, props), (0, _react2.jsx)(Component, null, children));
});