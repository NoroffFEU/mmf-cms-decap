"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InsertDropdownMenu = InsertDropdownMenu;
var _react = _interopRequireDefault(require("react"));
var _plateBlockQuote = require("@udecode/plate-block-quote");
var _plateCommon = require("@udecode/plate-common");
var _plateHeading = require("@udecode/plate-heading");
var _plateParagraph = require("@udecode/plate-paragraph");
var _icons = require("@/components/icons");
var _dropdownMenu = require("./dropdown-menu");
var _toolbar = require("./toolbar");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const items = [{
  label: 'Basic blocks',
  items: [{
    value: _plateParagraph.ELEMENT_PARAGRAPH,
    label: 'Paragraph',
    description: 'Paragraph',
    icon: _icons.Icons.paragraph
  }, {
    value: _plateHeading.ELEMENT_H1,
    label: 'Heading 1',
    description: 'Heading 1',
    icon: _icons.Icons.h1
  }, {
    value: _plateHeading.ELEMENT_H2,
    label: 'Heading 2',
    description: 'Heading 2',
    icon: _icons.Icons.h2
  }, {
    value: _plateHeading.ELEMENT_H3,
    label: 'Heading 3',
    description: 'Heading 3',
    icon: _icons.Icons.h3
  }, {
    value: _plateBlockQuote.ELEMENT_BLOCKQUOTE,
    label: 'Quote',
    description: 'Quote (⌘+⇧+.)',
    icon: _icons.Icons.blockquote
  }
  // {
  //   value: ELEMENT_TABLE,
  //   label: 'Table',
  //   description: 'Table',
  //   icon: Icons.table,
  // },
  // {
  //   value: 'ul',
  //   label: 'Bulleted list',
  //   description: 'Bulleted list',
  //   icon: Icons.ul,
  // },
  // {
  //   value: 'ol',
  //   label: 'Numbered list',
  //   description: 'Numbered list',
  //   icon: Icons.ol,
  // },
  // {
  //   value: ELEMENT_HR,
  //   label: 'Divider',
  //   description: 'Divider (---)',
  //   icon: Icons.hr,
  // },
  ]
}
// {
//   label: 'Media',
//   items: [
//     {
//       value: ELEMENT_CODE_BLOCK,
//       label: 'Code',
//       description: 'Code (```)',
//       icon: Icons.codeblock,
//     },
//     {
//       value: ELEMENT_IMAGE,
//       label: 'Image',
//       description: 'Image',
//       icon: Icons.image,
//     },
//     {
//       value: ELEMENT_MEDIA_EMBED,
//       label: 'Embed',
//       description: 'Embed',
//       icon: Icons.embed,
//     },
//     {
//       value: ELEMENT_EXCALIDRAW,
//       label: 'Excalidraw',
//       description: 'Excalidraw',
//       icon: Icons.excalidraw,
//     },
//   ],
// },
// {
//   label: 'Inline',
//   items: [
//     {
//       value: ELEMENT_LINK,
//       label: 'Link',
//       description: 'Link',
//       icon: Icons.link,
//     },
//   ],
// },
];

function InsertDropdownMenu(props) {
  const editor = (0, _plateCommon.useEditorRef)();
  const openState = (0, _dropdownMenu.useOpenState)();
  return (0, _react2.jsx)(_dropdownMenu.DropdownMenu, _extends({
    modal: false
  }, openState, props), (0, _react2.jsx)(_dropdownMenu.DropdownMenuTrigger, {
    asChild: true
  }, (0, _react2.jsx)(_toolbar.ToolbarButton, {
    pressed: openState.open,
    tooltip: "Insert",
    isDropdown: true
  }, (0, _react2.jsx)(_icons.Icons.add, null))), (0, _react2.jsx)(_dropdownMenu.DropdownMenuContent, {
    align: "start",
    className: "flex max-h-[500px] min-w-0 flex-col gap-0.5 overflow-y-auto"
  }, items.map(({
    items: nestedItems,
    label
  }, index) => (0, _react2.jsx)(_react.default.Fragment, {
    key: label
  }, index !== 0 && (0, _react2.jsx)(_dropdownMenu.DropdownMenuSeparator, null), (0, _react2.jsx)(_dropdownMenu.DropdownMenuLabel, null, label), nestedItems.map(({
    value: type,
    label: itemLabel,
    icon: Icon
  }) => (0, _react2.jsx)(_dropdownMenu.DropdownMenuItem, {
    key: type,
    className: "min-w-[180px]",
    onSelect: async () => {
      switch (type) {
        // case ELEMENT_CODE_BLOCK: {
        //   insertEmptyCodeBlock(editor);
        //
        //   break;
        // }
        // case ELEMENT_IMAGE: {
        //   await insertMedia(editor, { type: ELEMENT_IMAGE });
        //
        //   break;
        // }
        // case ELEMENT_MEDIA_EMBED: {
        //   await insertMedia(editor, {
        //     type: ELEMENT_MEDIA_EMBED,
        //   });
        //
        //   break;
        // }
        // case 'ul':
        // case 'ol': {
        //   insertEmptyElement(editor, ELEMENT_PARAGRAPH, {
        //     select: true,
        //     nextBlock: true,
        //   });
        //
        //   if (settingsStore.get.checkedId(KEY_LIST_STYLE_TYPE)) {
        //     toggleIndentList(editor, {
        //       listStyleType: type === 'ul' ? 'disc' : 'decimal',
        //     });
        //   } else if (settingsStore.get.checkedId('list')) {
        //     toggleList(editor, { type });
        //   }
        //
        //   break;
        // }
        // case ELEMENT_TABLE: {
        //   insertTable(editor);
        //
        //   break;
        // }
        // case ELEMENT_LINK: {
        //   triggerFloatingLink(editor, { focused: true });
        //
        //   break;
        // }
        default:
          {
            (0, _plateCommon.insertEmptyElement)(editor, type, {
              select: true,
              nextBlock: true
            });
          }
      }
      (0, _plateCommon.focusEditor)(editor);
    }
  }, (0, _react2.jsx)(Icon, {
    className: "mr-2 h-5 w-5"
  }), itemLabel))))));
}