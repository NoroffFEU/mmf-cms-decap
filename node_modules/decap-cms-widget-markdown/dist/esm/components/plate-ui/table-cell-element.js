"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableCellHeaderElement = exports.TableCellElement = void 0;
var _react = _interopRequireDefault(require("react"));
var _cn = require("@udecode/cn");
var _plateCommon = require("@udecode/plate-common");
var _plateTable = require("@udecode/plate-table");
var _resizable = require("./resizable");
var _react2 = require("@emotion/react");
const _excluded = ["children", "className", "style", "hideBorder", "isHeader"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const TableCellElement = exports.TableCellElement = (0, _cn.withRef)((_ref, ref) => {
  var _borders$bottom, _borders$right, _borders$left, _borders$top;
  let {
      children,
      className,
      style,
      hideBorder,
      isHeader
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const {
    element
  } = props;
  const {
    colIndex,
    rowIndex,
    readOnly,
    selected,
    hovered,
    hoveredLeft,
    rowSize,
    borders,
    isSelectingCell,
    colSpan
  } = (0, _plateTable.useTableCellElementState)();
  const {
    props: cellProps
  } = (0, _plateTable.useTableCellElement)({
    element: props.element
  });
  const resizableState = (0, _plateTable.useTableCellElementResizableState)({
    colIndex,
    rowIndex,
    colSpan
  });
  const {
    rightProps,
    bottomProps,
    leftProps,
    hiddenLeft
  } = (0, _plateTable.useTableCellElementResizable)(resizableState);
  const Cell = isHeader ? 'th' : 'td';
  return (0, _react2.jsx)(_plateCommon.PlateElement, _extends({
    ref: ref,
    asChild: true,
    className: (0, _cn.cn)('relative h-full overflow-visible border-none bg-background p-0', hideBorder && 'before:border-none', element.background ? 'bg-[--cellBackground]' : 'bg-background', !hideBorder && (0, _cn.cn)(isHeader && 'text-left [&_>_*]:m-0', 'before:h-full before:w-full', selected && 'before:z-10 before:bg-muted', "before:absolute before:box-border before:select-none before:content-['']", borders && (0, _cn.cn)(((_borders$bottom = borders.bottom) === null || _borders$bottom === void 0 ? void 0 : _borders$bottom.size) && `before:border-b before:border-b-border`, ((_borders$right = borders.right) === null || _borders$right === void 0 ? void 0 : _borders$right.size) && `before:border-r before:border-r-border`, ((_borders$left = borders.left) === null || _borders$left === void 0 ? void 0 : _borders$left.size) && `before:border-l before:border-l-border`, ((_borders$top = borders.top) === null || _borders$top === void 0 ? void 0 : _borders$top.size) && `before:border-t before:border-t-border`)), className)
  }, cellProps, props, {
    style: _objectSpread({
      '--cellBackground': element.background
    }, style)
  }), (0, _react2.jsx)(Cell, null, (0, _react2.jsx)("div", {
    className: "relative z-20 box-border h-full px-3 py-2",
    style: {
      minHeight: rowSize
    }
  }, children), !isSelectingCell && (0, _react2.jsx)("div", {
    className: "group absolute top-0 h-full w-full select-none",
    contentEditable: false,
    suppressContentEditableWarning: true
  }, !readOnly && (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_resizable.ResizeHandle, _extends({}, rightProps, {
    className: "-top-3 right-[-5px] w-[10px]"
  })), (0, _react2.jsx)(_resizable.ResizeHandle, _extends({}, bottomProps, {
    className: "bottom-[-5px] h-[10px]"
  })), !hiddenLeft && (0, _react2.jsx)(_resizable.ResizeHandle, _extends({}, leftProps, {
    className: "-top-3 left-[-5px] w-[10px]"
  })), hovered && (0, _react2.jsx)("div", {
    className: (0, _cn.cn)('absolute -top-3 z-30 h-[calc(100%_+_12px)] w-1 bg-ring', 'right-[-1.5px]')
  }), hoveredLeft && (0, _react2.jsx)("div", {
    className: (0, _cn.cn)('absolute -top-3 z-30 h-[calc(100%_+_12px)] w-1 bg-ring', 'left-[-1.5px]')
  })))));
});
TableCellElement.displayName = 'TableCellElement';
const TableCellHeaderElement = exports.TableCellHeaderElement = (0, _cn.withProps)(TableCellElement, {
  isHeader: true
});