"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeBlockCombobox = CodeBlockCombobox;
var _react = _interopRequireWildcard(require("react"));
var _cn = require("@udecode/cn");
var _plateCodeBlock = require("@udecode/plate-code-block");
var _icons = require("@/components/icons");
var _button = require("./button");
var _command = require("./command");
var _popover = require("./popover");
var _react2 = require("@emotion/react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const languages = [{
  value: 'text',
  label: 'Plain Text'
}, ...Object.entries(_objectSpread(_objectSpread({}, _plateCodeBlock.CODE_BLOCK_LANGUAGES_POPULAR), _plateCodeBlock.CODE_BLOCK_LANGUAGES)).map(([key, val]) => ({
  value: key,
  label: val
}))];
function CodeBlockCombobox() {
  var _languages$find;
  const state = (0, _plateCodeBlock.useCodeBlockComboboxState)();
  const {
    commandItemProps
  } = (0, _plateCodeBlock.useCodeBlockCombobox)(state);
  const [open, setOpen] = (0, _react.useState)(false);
  if (state.readOnly) return null;
  return (0, _react2.jsx)(_popover.Popover, {
    open: open,
    onOpenChange: setOpen
  }, (0, _react2.jsx)(_popover.PopoverTrigger, {
    asChild: true
  }, (0, _react2.jsx)(_button.Button, {
    variant: "ghost",
    role: "combobox",
    "aria-expanded": open,
    className: "h-5 justify-between px-1 text-xs",
    size: "xs"
  }, state.value ? (_languages$find = languages.find(language => language.value === state.value)) === null || _languages$find === void 0 ? void 0 : _languages$find.label : 'Plain Text', (0, _react2.jsx)(_icons.Icons.chevronsUpDown, {
    className: "ml-2 h-4 w-4 shrink-0 opacity-50"
  }))), (0, _react2.jsx)(_popover.PopoverContent, {
    className: "w-[200px] p-0"
  }, (0, _react2.jsx)(_command.Command, null, (0, _react2.jsx)(_command.CommandInput, {
    placeholder: "Search language..."
  }), (0, _react2.jsx)(_command.CommandEmpty, null, "No language found."), (0, _react2.jsx)(_command.CommandList, null, languages.map(language => (0, _react2.jsx)(_command.CommandItem, {
    key: language.value,
    value: language.value,
    className: "cursor-pointer",
    onSelect: _value => {
      commandItemProps.onSelect(_value);
      setOpen(false);
    }
  }, (0, _react2.jsx)(_icons.Icons.check, {
    className: (0, _cn.cn)('mr-2 h-4 w-4', state.value === language.value ? 'opacity-100' : 'opacity-0')
  }), language.label))))));
}