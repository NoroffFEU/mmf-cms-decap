"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TurnIntoDropdownMenu = TurnIntoDropdownMenu;
var _react = _interopRequireDefault(require("react"));
var _plateBlockQuote = require("@udecode/plate-block-quote");
var _plateCommon = require("@udecode/plate-common");
var _plateHeading = require("@udecode/plate-heading");
var _plateParagraph = require("@udecode/plate-paragraph");
var _icons = require("@/components/icons");
var _dropdownMenu = require("./dropdown-menu");
var _toolbar = require("./toolbar");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const items = [{
  value: _plateParagraph.ELEMENT_PARAGRAPH,
  label: 'Paragraph',
  description: 'Paragraph',
  icon: _icons.Icons.paragraph
}, {
  value: _plateHeading.ELEMENT_H1,
  label: 'Heading 1',
  description: 'Heading 1',
  icon: _icons.Icons.h1
}, {
  value: _plateHeading.ELEMENT_H2,
  label: 'Heading 2',
  description: 'Heading 2',
  icon: _icons.Icons.h2
}, {
  value: _plateHeading.ELEMENT_H3,
  label: 'Heading 3',
  description: 'Heading 3',
  icon: _icons.Icons.h3
}, {
  value: _plateBlockQuote.ELEMENT_BLOCKQUOTE,
  label: 'Quote',
  description: 'Quote (⌘+⇧+.)',
  icon: _icons.Icons.blockquote
}
// {
//   value: 'ul',
//   label: 'Bulleted list',
//   description: 'Bulleted list',
//   icon: Icons.ul,
// },
// {
//   value: 'ol',
//   label: 'Numbered list',
//   description: 'Numbered list',
//   icon: Icons.ol,
// },
];

const defaultItem = items.find(item => item.value === _plateParagraph.ELEMENT_PARAGRAPH);
function TurnIntoDropdownMenu(props) {
  var _items$find2;
  const value = (0, _plateCommon.useEditorSelector)(editor => {
    if ((0, _plateCommon.isCollapsed)(editor.selection)) {
      const entry = (0, _plateCommon.findNode)(editor, {
        match: n => (0, _plateCommon.isBlock)(editor, n)
      });
      if (entry) {
        var _items$find$value, _items$find;
        return (_items$find$value = (_items$find = items.find(item => item.value === entry[0].type)) === null || _items$find === void 0 ? void 0 : _items$find.value) !== null && _items$find$value !== void 0 ? _items$find$value : _plateParagraph.ELEMENT_PARAGRAPH;
      }
    }
    return _plateParagraph.ELEMENT_PARAGRAPH;
  }, []);
  const editor = (0, _plateCommon.useEditorRef)();
  const openState = (0, _dropdownMenu.useOpenState)();
  const selectedItem = (_items$find2 = items.find(item => item.value === value)) !== null && _items$find2 !== void 0 ? _items$find2 : defaultItem;
  const {
    icon: SelectedItemIcon,
    label: selectedItemLabel
  } = selectedItem;
  return (0, _react2.jsx)(_dropdownMenu.DropdownMenu, _extends({
    modal: false
  }, openState, props), (0, _react2.jsx)(_dropdownMenu.DropdownMenuTrigger, {
    asChild: true
  }, (0, _react2.jsx)(_toolbar.ToolbarButton, {
    pressed: openState.open,
    tooltip: "Turn into",
    isDropdown: true,
    className: "lg:min-w-[130px]"
  }, (0, _react2.jsx)(SelectedItemIcon, {
    className: "h-5 w-5 lg:hidden"
  }), (0, _react2.jsx)("span", {
    className: "max-lg:hidden"
  }, selectedItemLabel))), (0, _react2.jsx)(_dropdownMenu.DropdownMenuContent, {
    align: "start",
    className: "min-w-0"
  }, (0, _react2.jsx)(_dropdownMenu.DropdownMenuLabel, null, "Turn into"), (0, _react2.jsx)(_dropdownMenu.DropdownMenuRadioGroup, {
    className: "flex flex-col gap-0.5",
    value: value,
    onValueChange: type => {
      // if (type === 'ul' || type === 'ol') {
      //   if (settingsStore.get.checkedId(KEY_LIST_STYLE_TYPE)) {
      //     toggleIndentList(editor, {
      //       listStyleType: type === 'ul' ? 'disc' : 'decimal',
      //     });
      //   } else if (settingsStore.get.checkedId('list')) {
      //     toggleList(editor, { type });
      //   }
      // } else {
      //   unwrapList(editor);
      (0, _plateCommon.toggleNodeType)(editor, {
        activeType: type
      });
      // }

      (0, _plateCommon.collapseSelection)(editor);
      (0, _plateCommon.focusEditor)(editor);
    }
  }, items.map(({
    value: itemValue,
    label,
    icon: Icon
  }) => (0, _react2.jsx)(_dropdownMenu.DropdownMenuRadioItem, {
    key: itemValue,
    value: itemValue,
    className: "min-w-[180px]"
  }, (0, _react2.jsx)(Icon, {
    className: "mr-2 h-5 w-5"
  }), label)))));
}