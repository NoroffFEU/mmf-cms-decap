"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkFloatingToolbar = LinkFloatingToolbar;
var _react = _interopRequireDefault(require("react"));
var _cn = require("@udecode/cn");
var _plateFloating = require("@udecode/plate-floating");
var _plateLink = require("@udecode/plate-link");
var _icons = require("@/components/icons");
var _button = require("./button");
var _input = require("./input");
var _popover = require("./popover");
var _separator = require("./separator");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const floatingOptions = {
  placement: 'bottom-start',
  middleware: [(0, _plateFloating.offset)(12), (0, _plateFloating.flip)({
    padding: 12,
    fallbackPlacements: ['bottom-end', 'top-start', 'top-end']
  })]
};
function LinkFloatingToolbar({
  state
}) {
  const insertState = (0, _plateLink.useFloatingLinkInsertState)(_objectSpread(_objectSpread({}, state), {}, {
    floatingOptions: _objectSpread(_objectSpread({}, floatingOptions), state === null || state === void 0 ? void 0 : state.floatingOptions)
  }));
  const {
    props: insertProps,
    ref: insertRef,
    hidden,
    textInputProps
  } = (0, _plateLink.useFloatingLinkInsert)(insertState);
  const editState = (0, _plateLink.useFloatingLinkEditState)(_objectSpread(_objectSpread({}, state), {}, {
    floatingOptions: _objectSpread(_objectSpread({}, floatingOptions), state === null || state === void 0 ? void 0 : state.floatingOptions)
  }));
  const {
    props: editProps,
    ref: editRef,
    editButtonProps,
    unlinkButtonProps
  } = (0, _plateLink.useFloatingLinkEdit)(editState);
  if (hidden) return null;
  const input = (0, _react2.jsx)("div", {
    className: "flex w-[330px] flex-col"
  }, (0, _react2.jsx)("div", {
    className: "flex items-center"
  }, (0, _react2.jsx)("div", {
    className: "flex items-center pl-3 text-muted-foreground"
  }, (0, _react2.jsx)(_icons.Icons.link, {
    className: "h-4 w-4"
  })), (0, _react2.jsx)(_plateLink.FloatingLinkUrlInput, {
    className: (0, _input.inputVariants)({
      variant: 'ghost',
      h: 'sm'
    }),
    placeholder: "Paste link"
  })), (0, _react2.jsx)(_separator.Separator, null), (0, _react2.jsx)("div", {
    className: "flex items-center"
  }, (0, _react2.jsx)("div", {
    className: "flex items-center pl-3 text-muted-foreground"
  }, (0, _react2.jsx)(_icons.Icons.text, {
    className: "h-4 w-4"
  })), (0, _react2.jsx)("input", _extends({
    className: (0, _input.inputVariants)({
      variant: 'ghost',
      h: 'sm'
    }),
    placeholder: "Text to display"
  }, textInputProps))));
  const editContent = editState.isEditing ? input : (0, _react2.jsx)("div", {
    className: "box-content flex h-9 items-center gap-1"
  }, (0, _react2.jsx)("button", _extends({
    type: "button",
    className: (0, _button.buttonVariants)({
      variant: 'ghost',
      size: 'sm'
    })
  }, editButtonProps), "Edit link"), (0, _react2.jsx)(_separator.Separator, {
    orientation: "vertical"
  }), (0, _react2.jsx)(_plateLink.LinkOpenButton, {
    className: (0, _button.buttonVariants)({
      variant: 'ghost',
      size: 'sms'
    })
  }, (0, _react2.jsx)(_icons.Icons.externalLink, {
    width: 18
  })), (0, _react2.jsx)(_separator.Separator, {
    orientation: "vertical"
  }), (0, _react2.jsx)("button", _extends({
    type: "button",
    className: (0, _button.buttonVariants)({
      variant: 'ghost',
      size: 'sms'
    })
  }, unlinkButtonProps), (0, _react2.jsx)(_icons.Icons.unlink, {
    width: 18
  })));
  return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)("div", _extends({
    ref: insertRef,
    className: (0, _cn.cn)((0, _popover.popoverVariants)(), 'w-auto p-1')
  }, insertProps), input), (0, _react2.jsx)("div", _extends({
    ref: editRef,
    className: (0, _cn.cn)((0, _popover.popoverVariants)(), 'w-auto p-1')
  }, editProps), editContent));
}