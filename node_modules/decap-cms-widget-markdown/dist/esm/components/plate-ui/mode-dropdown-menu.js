"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModeDropdownMenu = ModeDropdownMenu;
var _react = _interopRequireDefault(require("react"));
var _plateCommon = require("@udecode/plate-common");
var _icons = require("@/components/icons");
var _dropdownMenu = require("./dropdown-menu");
var _toolbar = require("./toolbar");
var _react2 = require("@emotion/react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ModeDropdownMenu(props) {
  const editor = (0, _plateCommon.useEditorRef)();
  const setReadOnly = (0, _plateCommon.usePlateStore)().set.readOnly();
  const readOnly = (0, _plateCommon.useEditorReadOnly)();
  const openState = (0, _dropdownMenu.useOpenState)();
  let value = 'editing';
  if (readOnly) value = 'viewing';
  const item = {
    editing: (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_icons.Icons.editing, {
      className: "mr-2 h-5 w-5"
    }), (0, _react2.jsx)("span", {
      className: "hidden lg:inline"
    }, "Editing")),
    viewing: (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_icons.Icons.viewing, {
      className: "mr-2 h-5 w-5"
    }), (0, _react2.jsx)("span", {
      className: "hidden lg:inline"
    }, "Viewing"))
  };
  return (0, _react2.jsx)(_dropdownMenu.DropdownMenu, _extends({
    modal: false
  }, openState, props), (0, _react2.jsx)(_dropdownMenu.DropdownMenuTrigger, {
    asChild: true
  }, (0, _react2.jsx)(_toolbar.ToolbarButton, {
    pressed: openState.open,
    tooltip: "Editing mode",
    isDropdown: true,
    className: "min-w-[auto] lg:min-w-[130px]"
  }, item[value])), (0, _react2.jsx)(_dropdownMenu.DropdownMenuContent, {
    align: "start",
    className: "min-w-[180px]"
  }, (0, _react2.jsx)(_dropdownMenu.DropdownMenuRadioGroup, {
    className: "flex flex-col gap-0.5",
    value: value,
    onValueChange: newValue => {
      if (newValue !== 'viewing') {
        setReadOnly(false);
      }
      if (newValue === 'viewing') {
        setReadOnly(true);
        return;
      }
      if (newValue === 'editing') {
        (0, _plateCommon.focusEditor)(editor);
        return;
      }
    }
  }, (0, _react2.jsx)(_dropdownMenu.DropdownMenuRadioItem, {
    value: "editing"
  }, item.editing), (0, _react2.jsx)(_dropdownMenu.DropdownMenuRadioItem, {
    value: "viewing"
  }, item.viewing))));
}