"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableFloatingToolbar = exports.TableElement = exports.TableBordersDropdownMenuContent = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactPopover = require("@radix-ui/react-popover");
var _cn = require("@udecode/cn");
var _plateCommon = require("@udecode/plate-common");
var _plateTable = require("@udecode/plate-table");
var _slateReact = require("slate-react");
var _icons = require("@/components/icons");
var _button = require("./button");
var _dropdownMenu = require("./dropdown-menu");
var _popover = require("./popover");
var _separator = require("./separator");
var _react2 = require("@emotion/react");
const _excluded = ["children"],
  _excluded2 = ["className", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const TableBordersDropdownMenuContent = exports.TableBordersDropdownMenuContent = (0, _cn.withRef)((props, ref) => {
  const {
    getOnSelectTableBorder,
    hasOuterBorders,
    hasBottomBorder,
    hasLeftBorder,
    hasNoBorders,
    hasRightBorder,
    hasTopBorder
  } = (0, _plateTable.useTableBordersDropdownMenuContentState)();
  return (0, _react2.jsx)(_dropdownMenu.DropdownMenuContent, _extends({
    ref: ref,
    className: (0, _cn.cn)('min-w-[220px]'),
    side: "right",
    align: "start",
    sideOffset: 0
  }, props), (0, _react2.jsx)(_dropdownMenu.DropdownMenuCheckboxItem, {
    checked: hasBottomBorder,
    onCheckedChange: getOnSelectTableBorder('bottom')
  }, (0, _react2.jsx)(_icons.Icons.borderBottom, {
    className: (0, _icons.iconVariants)({
      size: 'sm'
    })
  }), (0, _react2.jsx)("div", null, "Bottom Border")), (0, _react2.jsx)(_dropdownMenu.DropdownMenuCheckboxItem, {
    checked: hasTopBorder,
    onCheckedChange: getOnSelectTableBorder('top')
  }, (0, _react2.jsx)(_icons.Icons.borderTop, {
    className: (0, _icons.iconVariants)({
      size: 'sm'
    })
  }), (0, _react2.jsx)("div", null, "Top Border")), (0, _react2.jsx)(_dropdownMenu.DropdownMenuCheckboxItem, {
    checked: hasLeftBorder,
    onCheckedChange: getOnSelectTableBorder('left')
  }, (0, _react2.jsx)(_icons.Icons.borderLeft, {
    className: (0, _icons.iconVariants)({
      size: 'sm'
    })
  }), (0, _react2.jsx)("div", null, "Left Border")), (0, _react2.jsx)(_dropdownMenu.DropdownMenuCheckboxItem, {
    checked: hasRightBorder,
    onCheckedChange: getOnSelectTableBorder('right')
  }, (0, _react2.jsx)(_icons.Icons.borderRight, {
    className: (0, _icons.iconVariants)({
      size: 'sm'
    })
  }), (0, _react2.jsx)("div", null, "Right Border")), (0, _react2.jsx)(_separator.Separator, null), (0, _react2.jsx)(_dropdownMenu.DropdownMenuCheckboxItem, {
    checked: hasNoBorders,
    onCheckedChange: getOnSelectTableBorder('none')
  }, (0, _react2.jsx)(_icons.Icons.borderNone, {
    className: (0, _icons.iconVariants)({
      size: 'sm'
    })
  }), (0, _react2.jsx)("div", null, "No Border")), (0, _react2.jsx)(_dropdownMenu.DropdownMenuCheckboxItem, {
    checked: hasOuterBorders,
    onCheckedChange: getOnSelectTableBorder('outer')
  }, (0, _react2.jsx)(_icons.Icons.borderAll, {
    className: (0, _icons.iconVariants)({
      size: 'sm'
    })
  }), (0, _react2.jsx)("div", null, "Outside Borders")));
});
const TableFloatingToolbar = exports.TableFloatingToolbar = (0, _cn.withRef)((_ref, ref) => {
  let {
      children
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const element = (0, _plateCommon.useElement)();
  const {
    props: buttonProps
  } = (0, _plateCommon.useRemoveNodeButton)({
    element
  });
  const selectionCollapsed = (0, _plateCommon.useEditorSelector)(editor => !(0, _plateCommon.isSelectionExpanded)(editor), []);
  const readOnly = (0, _slateReact.useReadOnly)();
  const selected = (0, _slateReact.useSelected)();
  const editor = (0, _plateCommon.useEditorRef)();
  const collapsed = !readOnly && selected && selectionCollapsed;
  const open = !readOnly && selected;
  const {
    canMerge,
    canUnmerge
  } = (0, _plateTable.useTableMergeState)();
  const mergeContent = canMerge && (0, _react2.jsx)(_button.Button, {
    contentEditable: false,
    variant: "ghost",
    isMenu: true,
    onClick: () => (0, _plateTable.mergeTableCells)(editor)
  }, (0, _react2.jsx)(_icons.Icons.combine, {
    className: "mr-2 h-4 w-4"
  }), "Merge");
  const unmergeButton = canUnmerge && (0, _react2.jsx)(_button.Button, {
    contentEditable: false,
    variant: "ghost",
    isMenu: true,
    onClick: () => (0, _plateTable.unmergeTableCells)(editor)
  }, (0, _react2.jsx)(_icons.Icons.ungroup, {
    className: "mr-2 h-4 w-4"
  }), "Unmerge");
  const bordersContent = collapsed && (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_dropdownMenu.DropdownMenu, {
    modal: false
  }, (0, _react2.jsx)(_dropdownMenu.DropdownMenuTrigger, {
    asChild: true
  }, (0, _react2.jsx)(_button.Button, {
    variant: "ghost",
    isMenu: true
  }, (0, _react2.jsx)(_icons.Icons.borderAll, {
    className: "mr-2 h-4 w-4"
  }), "Borders")), (0, _react2.jsx)(_dropdownMenu.DropdownMenuPortal, null, (0, _react2.jsx)(TableBordersDropdownMenuContent, null))), (0, _react2.jsx)(_button.Button, _extends({
    contentEditable: false,
    variant: "ghost",
    isMenu: true
  }, buttonProps), (0, _react2.jsx)(_icons.Icons.delete, {
    className: "mr-2 h-4 w-4"
  }), "Delete"));
  return (0, _react2.jsx)(_popover.Popover, {
    open: open,
    modal: false
  }, (0, _react2.jsx)(_reactPopover.PopoverAnchor, {
    asChild: true
  }, children), (canMerge || canUnmerge || collapsed) && (0, _react2.jsx)(_popover.PopoverContent, _extends({
    ref: ref,
    className: (0, _cn.cn)((0, _popover.popoverVariants)(), 'flex w-[220px] flex-col gap-1 p-1'),
    onOpenAutoFocus: e => e.preventDefault()
  }, props), unmergeButton, mergeContent, bordersContent));
});
const TableElement = exports.TableElement = (0, _plateCommon.withHOC)(_plateTable.TableProvider, (0, _cn.withRef)((_ref2, ref) => {
  let {
      className,
      children
    } = _ref2,
    props = _objectWithoutProperties(_ref2, _excluded2);
  const {
    colSizes,
    isSelectingCell,
    minColumnWidth,
    marginLeft
  } = (0, _plateTable.useTableElementState)();
  const {
    props: tableProps,
    colGroupProps
  } = (0, _plateTable.useTableElement)();
  return (0, _react2.jsx)(TableFloatingToolbar, null, (0, _react2.jsx)("div", {
    style: {
      paddingLeft: marginLeft
    }
  }, (0, _react2.jsx)(_plateCommon.PlateElement, _extends({
    ref: ref,
    asChild: true,
    className: (0, _cn.cn)('my-4 ml-px mr-0 table h-px w-full table-fixed border-collapse', isSelectingCell && '[&_*::selection]:bg-none', className)
  }, tableProps, props), (0, _react2.jsx)("table", null, (0, _react2.jsx)("colgroup", colGroupProps, colSizes.map((width, index) => (0, _react2.jsx)("col", {
    key: index,
    style: {
      minWidth: minColumnWidth,
      width: width || undefined
    }
  }))), (0, _react2.jsx)("tbody", {
    className: "min-w-full"
  }, children)))));
}));