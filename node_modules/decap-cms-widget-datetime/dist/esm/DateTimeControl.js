"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("@emotion/react");
var _dayjs = _interopRequireDefault(require("dayjs"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /** @jsx jsx */
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1tfa1p6-Buttons",
  styles: "display:flex;gap:20px;width:fit-content;label:Buttons;"
} : {
  name: "1tfa1p6-Buttons",
  styles: "display:flex;gap:20px;width:fit-content;label:Buttons;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVWMiLCJmaWxlIjoiLi4vLi4vc3JjL0RhdGVUaW1lQ29udHJvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBqc3gsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgeyBidXR0b25zIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5mdW5jdGlvbiBCdXR0b25zKHsgdCwgaGFuZGxlQ2hhbmdlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiAyMHB4O1xuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICBgfVxuICAgID5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgJHtidXR0b25zLmJ1dHRvbn1cbiAgICAgICAgICAke2J1dHRvbnMud2lkZ2V0fVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDaGFuZ2UoZGF5anMoKSl9XG4gICAgICA+XG4gICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5kYXRldGltZS5ub3cnKX1cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke2J1dHRvbnMuYnV0dG9ufVxuICAgICAgICAgICR7YnV0dG9ucy53aWRnZXR9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNoYW5nZSgnJyl9XG4gICAgICA+XG4gICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yV2lkZ2V0cy5kYXRldGltZS5jbGVhcicpfVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGVUaW1lQ29udHJvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZmllbGQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBmb3JJRDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWVXcmFwcGVyOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2V0QWN0aXZlU3R5bGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0SW5hY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICB9O1xuXG4gIGdldEZvcm1hdCgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGZpZWxkLmdldCgnZm9ybWF0Jyk7XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGZpZWxkLmdldCgnZGVmYXVsdCcpO1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBmb3JtYXQgPSB0aGlzLmdldEZvcm1hdCgpO1xuICBkZWZhdWx0VmFsdWUgPSB0aGlzLmdldERlZmF1bHRWYWx1ZSgpO1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnQgZGF0ZSBhcyBkZWZhdWx0IHZhbHVlIGlmIG5vIHZhbHVlIGlzIHByb3ZpZGVkIGFuZCBkZWZhdWx0IGlzIGFic2VudC4gQW5cbiAgICAgKiBlbXB0eSBkZWZhdWx0IHN0cmluZyBtZWFucyB0aGUgdmFsdWUgaXMgaW50ZW50aW9uYWxseSBibGFuay5cbiAgICAgKi9cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKHRoaXMuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQgPyBuZXcgRGF0ZSgpIDogdGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gRGF0ZSBpcyB2YWxpZCBpZiBkYXRldGltZSBpcyBhIGRheWpzIG9yIERhdGUgb2JqZWN0IG90aGVyd2lzZSBpdCdzIGEgc3RyaW5nLlxuICAvLyBIYW5kbGUgdGhlIGVtcHR5IGNhc2UsIGlmIHRoZSB1c2VyIHdhbnRzIHRvIGVtcHR5IHRoZSBmaWVsZC5cbiAgaXNWYWxpZERhdGUgPSBkYXRldGltZSA9PiBkYXlqcy5pc0RheWpzKGRhdGV0aW1lKSB8fCBkYXRldGltZSBpbnN0YW5jZW9mIERhdGUgfHwgZGF0ZXRpbWUgPT09ICcnO1xuXG4gIGhhbmRsZUNoYW5nZSA9IGRhdGV0aW1lID0+IHtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRhdGUgb25seSBpZiBpdCBpcyB2YWxpZC5cbiAgICAgKi9cbiAgICBpZiAoIXRoaXMuaXNWYWxpZERhdGUoZGF0ZXRpbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2UgYSBmb3JtYXR0ZWQgc3RyaW5nIG9ubHkgaWYgYSBmb3JtYXQgaXMgc2V0IGluIHRoZSBjb25maWcuXG4gICAgICogT3RoZXJ3aXNlIHByb2R1Y2UgYSBkYXRlIG9iamVjdC5cbiAgICAgKi9cbiAgICBpZiAodGhpcy5mb3JtYXQpIHtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gZGF0ZXRpbWUgPyBkYXlqcyhkYXRldGltZSkuZm9ybWF0KHRoaXMuZm9ybWF0KSA6ICcnO1xuICAgICAgb25DaGFuZ2UoZm9ybWF0dGVkVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGRheWpzLmlzRGF5anMoZGF0ZXRpbWUpID8gZGF0ZXRpbWUudG9EYXRlKCkgOiBkYXRldGltZTtcbiAgICAgIG9uQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZm9ySUQsIHZhbHVlLCBjbGFzc05hbWVXcmFwcGVyLCBzZXRBY3RpdmVTdHlsZSwgc2V0SW5hY3RpdmVTdHlsZSwgdCwgaXNEaXNhYmxlZCB9ID1cbiAgICAgIHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcbiAgICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9e2ZvcklEfVxuICAgICAgICAgIHR5cGU9XCJkYXRldGltZS1sb2NhbFwiXG4gICAgICAgICAgdmFsdWU9e2RheWpzKHZhbHVlKS5mb3JtYXQoJ1lZWVktTU0tRERUSEg6bW0nKX1cbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLmhhbmRsZUNoYW5nZShkYXlqcyhlLnRhcmdldC52YWx1ZSkpfVxuICAgICAgICAgIG9uRm9jdXM9e3NldEFjdGl2ZVN0eWxlfVxuICAgICAgICAgIG9uQmx1cj17c2V0SW5hY3RpdmVTdHlsZX1cbiAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICAgICAgeyFpc0Rpc2FibGVkICYmIDxCdXR0b25zIHQ9e3R9IGhhbmRsZUNoYW5nZT17diA9PiB0aGlzLmhhbmRsZUNoYW5nZSh2KX0gLz59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function Buttons({
  t,
  handleChange
}) {
  return (0, _react2.jsx)("div", {
    css: _ref2
  }, (0, _react2.jsx)("button", {
    css: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.buttons.button, " ", _decapCmsUiDefault.buttons.widget, ";;label:Buttons;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCB7IGJ1dHRvbnMgfSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmZ1bmN0aW9uIEJ1dHRvbnMoeyB0LCBoYW5kbGVDaGFuZ2UgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke2J1dHRvbnMuYnV0dG9ufVxuICAgICAgICAgICR7YnV0dG9ucy53aWRnZXR9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNoYW5nZShkYXlqcygpKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLm5vdycpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7YnV0dG9ucy5idXR0b259XG4gICAgICAgICAgJHtidXR0b25zLndpZGdldH1cbiAgICAgICAgYH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2hhbmdlKCcnKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLmNsZWFyJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIH07XG5cbiAgZ2V0Rm9ybWF0KCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZm9ybWF0ID0gZmllbGQuZ2V0KCdmb3JtYXQnKTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZmllbGQuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGZvcm1hdCA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gIGRlZmF1bHRWYWx1ZSA9IHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBkYXRlIGFzIGRlZmF1bHQgdmFsdWUgaWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQgYW5kIGRlZmF1bHQgaXMgYWJzZW50LiBBblxuICAgICAqIGVtcHR5IGRlZmF1bHQgc3RyaW5nIG1lYW5zIHRoZSB2YWx1ZSBpcyBpbnRlbnRpb25hbGx5IGJsYW5rLlxuICAgICAqL1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCA/IG5ldyBEYXRlKCkgOiB0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBEYXRlIGlzIHZhbGlkIGlmIGRhdGV0aW1lIGlzIGEgZGF5anMgb3IgRGF0ZSBvYmplY3Qgb3RoZXJ3aXNlIGl0J3MgYSBzdHJpbmcuXG4gIC8vIEhhbmRsZSB0aGUgZW1wdHkgY2FzZSwgaWYgdGhlIHVzZXIgd2FudHMgdG8gZW1wdHkgdGhlIGZpZWxkLlxuICBpc1ZhbGlkRGF0ZSA9IGRhdGV0aW1lID0+IGRheWpzLmlzRGF5anMoZGF0ZXRpbWUpIHx8IGRhdGV0aW1lIGluc3RhbmNlb2YgRGF0ZSB8fCBkYXRldGltZSA9PT0gJyc7XG5cbiAgaGFuZGxlQ2hhbmdlID0gZGF0ZXRpbWUgPT4ge1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGF0ZSBvbmx5IGlmIGl0IGlzIHZhbGlkLlxuICAgICAqL1xuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZShkYXRldGltZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZSBhIGZvcm1hdHRlZCBzdHJpbmcgb25seSBpZiBhIGZvcm1hdCBpcyBzZXQgaW4gdGhlIGNvbmZpZy5cbiAgICAgKiBPdGhlcndpc2UgcHJvZHVjZSBhIGRhdGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmICh0aGlzLmZvcm1hdCkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBkYXRldGltZSA/IGRheWpzKGRhdGV0aW1lKS5mb3JtYXQodGhpcy5mb3JtYXQpIDogJyc7XG4gICAgICBvbkNoYW5nZShmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGF5anMuaXNEYXlqcyhkYXRldGltZSkgPyBkYXRldGltZS50b0RhdGUoKSA6IGRhdGV0aW1lO1xuICAgICAgb25DaGFuZ2UodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlLCBzZXRJbmFjdGl2ZVN0eWxlLCB0LCBpc0Rpc2FibGVkIH0gPVxuICAgICAgdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xuICAgICAgICAgIGdhcDogMjBweDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBpZD17Zm9ySUR9XG4gICAgICAgICAgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCJcbiAgICAgICAgICB2YWx1ZT17ZGF5anModmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbScpfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuaGFuZGxlQ2hhbmdlKGRheWpzKGUudGFyZ2V0LnZhbHVlKSl9XG4gICAgICAgICAgb25Gb2N1cz17c2V0QWN0aXZlU3R5bGV9XG4gICAgICAgICAgb25CbHVyPXtzZXRJbmFjdGl2ZVN0eWxlfVxuICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAvPlxuICAgICAgICB7IWlzRGlzYWJsZWQgJiYgPEJ1dHRvbnMgdD17dH0gaGFuZGxlQ2hhbmdlPXt2ID0+IHRoaXMuaGFuZGxlQ2hhbmdlKHYpfSAvPn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */")),
    onClick: () => handleChange((0, _dayjs.default)())
  }, t('editor.editorWidgets.datetime.now')), (0, _react2.jsx)("button", {
    css: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.buttons.button, " ", _decapCmsUiDefault.buttons.widget, ";;label:Buttons;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEJnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCB7IGJ1dHRvbnMgfSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmZ1bmN0aW9uIEJ1dHRvbnMoeyB0LCBoYW5kbGVDaGFuZ2UgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke2J1dHRvbnMuYnV0dG9ufVxuICAgICAgICAgICR7YnV0dG9ucy53aWRnZXR9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNoYW5nZShkYXlqcygpKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLm5vdycpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7YnV0dG9ucy5idXR0b259XG4gICAgICAgICAgJHtidXR0b25zLndpZGdldH1cbiAgICAgICAgYH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2hhbmdlKCcnKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLmNsZWFyJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIH07XG5cbiAgZ2V0Rm9ybWF0KCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZm9ybWF0ID0gZmllbGQuZ2V0KCdmb3JtYXQnKTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZmllbGQuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGZvcm1hdCA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gIGRlZmF1bHRWYWx1ZSA9IHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBkYXRlIGFzIGRlZmF1bHQgdmFsdWUgaWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQgYW5kIGRlZmF1bHQgaXMgYWJzZW50LiBBblxuICAgICAqIGVtcHR5IGRlZmF1bHQgc3RyaW5nIG1lYW5zIHRoZSB2YWx1ZSBpcyBpbnRlbnRpb25hbGx5IGJsYW5rLlxuICAgICAqL1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCA/IG5ldyBEYXRlKCkgOiB0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBEYXRlIGlzIHZhbGlkIGlmIGRhdGV0aW1lIGlzIGEgZGF5anMgb3IgRGF0ZSBvYmplY3Qgb3RoZXJ3aXNlIGl0J3MgYSBzdHJpbmcuXG4gIC8vIEhhbmRsZSB0aGUgZW1wdHkgY2FzZSwgaWYgdGhlIHVzZXIgd2FudHMgdG8gZW1wdHkgdGhlIGZpZWxkLlxuICBpc1ZhbGlkRGF0ZSA9IGRhdGV0aW1lID0+IGRheWpzLmlzRGF5anMoZGF0ZXRpbWUpIHx8IGRhdGV0aW1lIGluc3RhbmNlb2YgRGF0ZSB8fCBkYXRldGltZSA9PT0gJyc7XG5cbiAgaGFuZGxlQ2hhbmdlID0gZGF0ZXRpbWUgPT4ge1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGF0ZSBvbmx5IGlmIGl0IGlzIHZhbGlkLlxuICAgICAqL1xuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZShkYXRldGltZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZSBhIGZvcm1hdHRlZCBzdHJpbmcgb25seSBpZiBhIGZvcm1hdCBpcyBzZXQgaW4gdGhlIGNvbmZpZy5cbiAgICAgKiBPdGhlcndpc2UgcHJvZHVjZSBhIGRhdGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmICh0aGlzLmZvcm1hdCkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBkYXRldGltZSA/IGRheWpzKGRhdGV0aW1lKS5mb3JtYXQodGhpcy5mb3JtYXQpIDogJyc7XG4gICAgICBvbkNoYW5nZShmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGF5anMuaXNEYXlqcyhkYXRldGltZSkgPyBkYXRldGltZS50b0RhdGUoKSA6IGRhdGV0aW1lO1xuICAgICAgb25DaGFuZ2UodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlLCBzZXRJbmFjdGl2ZVN0eWxlLCB0LCBpc0Rpc2FibGVkIH0gPVxuICAgICAgdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xuICAgICAgICAgIGdhcDogMjBweDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBpZD17Zm9ySUR9XG4gICAgICAgICAgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCJcbiAgICAgICAgICB2YWx1ZT17ZGF5anModmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbScpfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuaGFuZGxlQ2hhbmdlKGRheWpzKGUudGFyZ2V0LnZhbHVlKSl9XG4gICAgICAgICAgb25Gb2N1cz17c2V0QWN0aXZlU3R5bGV9XG4gICAgICAgICAgb25CbHVyPXtzZXRJbmFjdGl2ZVN0eWxlfVxuICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAvPlxuICAgICAgICB7IWlzRGlzYWJsZWQgJiYgPEJ1dHRvbnMgdD17dH0gaGFuZGxlQ2hhbmdlPXt2ID0+IHRoaXMuaGFuZGxlQ2hhbmdlKHYpfSAvPn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */")),
    onClick: () => handleChange('')
  }, t('editor.editorWidgets.datetime.clear')));
}
var _ref = process.env.NODE_ENV === "production" ? {
  name: "ptu1mf-DateTimeControl",
  styles: "display:flex!important;gap:20px;align-items:center;label:DateTimeControl;"
} : {
  name: "ptu1mf-DateTimeControl",
  styles: "display:flex!important;gap:20px;align-items:center;label:DateTimeControl;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0hnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCB7IGJ1dHRvbnMgfSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmZ1bmN0aW9uIEJ1dHRvbnMoeyB0LCBoYW5kbGVDaGFuZ2UgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke2J1dHRvbnMuYnV0dG9ufVxuICAgICAgICAgICR7YnV0dG9ucy53aWRnZXR9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNoYW5nZShkYXlqcygpKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLm5vdycpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7YnV0dG9ucy5idXR0b259XG4gICAgICAgICAgJHtidXR0b25zLndpZGdldH1cbiAgICAgICAgYH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2hhbmdlKCcnKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLmNsZWFyJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIH07XG5cbiAgZ2V0Rm9ybWF0KCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZm9ybWF0ID0gZmllbGQuZ2V0KCdmb3JtYXQnKTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZmllbGQuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGZvcm1hdCA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gIGRlZmF1bHRWYWx1ZSA9IHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBkYXRlIGFzIGRlZmF1bHQgdmFsdWUgaWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQgYW5kIGRlZmF1bHQgaXMgYWJzZW50LiBBblxuICAgICAqIGVtcHR5IGRlZmF1bHQgc3RyaW5nIG1lYW5zIHRoZSB2YWx1ZSBpcyBpbnRlbnRpb25hbGx5IGJsYW5rLlxuICAgICAqL1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCA/IG5ldyBEYXRlKCkgOiB0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBEYXRlIGlzIHZhbGlkIGlmIGRhdGV0aW1lIGlzIGEgZGF5anMgb3IgRGF0ZSBvYmplY3Qgb3RoZXJ3aXNlIGl0J3MgYSBzdHJpbmcuXG4gIC8vIEhhbmRsZSB0aGUgZW1wdHkgY2FzZSwgaWYgdGhlIHVzZXIgd2FudHMgdG8gZW1wdHkgdGhlIGZpZWxkLlxuICBpc1ZhbGlkRGF0ZSA9IGRhdGV0aW1lID0+IGRheWpzLmlzRGF5anMoZGF0ZXRpbWUpIHx8IGRhdGV0aW1lIGluc3RhbmNlb2YgRGF0ZSB8fCBkYXRldGltZSA9PT0gJyc7XG5cbiAgaGFuZGxlQ2hhbmdlID0gZGF0ZXRpbWUgPT4ge1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGF0ZSBvbmx5IGlmIGl0IGlzIHZhbGlkLlxuICAgICAqL1xuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZShkYXRldGltZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZSBhIGZvcm1hdHRlZCBzdHJpbmcgb25seSBpZiBhIGZvcm1hdCBpcyBzZXQgaW4gdGhlIGNvbmZpZy5cbiAgICAgKiBPdGhlcndpc2UgcHJvZHVjZSBhIGRhdGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmICh0aGlzLmZvcm1hdCkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBkYXRldGltZSA/IGRheWpzKGRhdGV0aW1lKS5mb3JtYXQodGhpcy5mb3JtYXQpIDogJyc7XG4gICAgICBvbkNoYW5nZShmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGF5anMuaXNEYXlqcyhkYXRldGltZSkgPyBkYXRldGltZS50b0RhdGUoKSA6IGRhdGV0aW1lO1xuICAgICAgb25DaGFuZ2UodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlLCBzZXRJbmFjdGl2ZVN0eWxlLCB0LCBpc0Rpc2FibGVkIH0gPVxuICAgICAgdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xuICAgICAgICAgIGdhcDogMjBweDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBpZD17Zm9ySUR9XG4gICAgICAgICAgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCJcbiAgICAgICAgICB2YWx1ZT17ZGF5anModmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbScpfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuaGFuZGxlQ2hhbmdlKGRheWpzKGUudGFyZ2V0LnZhbHVlKSl9XG4gICAgICAgICAgb25Gb2N1cz17c2V0QWN0aXZlU3R5bGV9XG4gICAgICAgICAgb25CbHVyPXtzZXRJbmFjdGl2ZVN0eWxlfVxuICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAvPlxuICAgICAgICB7IWlzRGlzYWJsZWQgJiYgPEJ1dHRvbnMgdD17dH0gaGFuZGxlQ2hhbmdlPXt2ID0+IHRoaXMuaGFuZGxlQ2hhbmdlKHYpfSAvPn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
class DateTimeControl extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "format", this.getFormat());
    _defineProperty(this, "defaultValue", this.getDefaultValue());
    // Date is valid if datetime is a dayjs or Date object otherwise it's a string.
    // Handle the empty case, if the user wants to empty the field.
    _defineProperty(this, "isValidDate", datetime => _dayjs.default.isDayjs(datetime) || datetime instanceof Date || datetime === '');
    _defineProperty(this, "handleChange", datetime => {
      /**
       * Set the date only if it is valid.
       */
      if (!this.isValidDate(datetime)) {
        return;
      }
      const {
        onChange
      } = this.props;

      /**
       * Produce a formatted string only if a format is set in the config.
       * Otherwise produce a date object.
       */
      if (this.format) {
        const formattedValue = datetime ? (0, _dayjs.default)(datetime).format(this.format) : '';
        onChange(formattedValue);
      } else {
        const value = _dayjs.default.isDayjs(datetime) ? datetime.toDate() : datetime;
        onChange(value);
      }
    });
  }
  getFormat() {
    const {
      field
    } = this.props;
    const format = field.get('format');
    return format;
  }
  getDefaultValue() {
    const {
      field
    } = this.props;
    const defaultValue = field.get('default');
    return defaultValue;
  }
  componentDidMount() {
    const {
      value
    } = this.props;

    /**
     * Set the current date as default value if no value is provided and default is absent. An
     * empty default string means the value is intentionally blank.
     */
    if (value === undefined) {
      setTimeout(() => {
        this.handleChange(this.defaultValue === undefined ? new Date() : this.defaultValue);
      }, 0);
    }
  }
  render() {
    const {
      forID,
      value,
      classNameWrapper,
      setActiveStyle,
      setInactiveStyle,
      t,
      isDisabled
    } = this.props;
    return (0, _react2.jsx)("div", {
      className: classNameWrapper,
      css: _ref
    }, (0, _react2.jsx)("input", {
      id: forID,
      type: "datetime-local",
      value: (0, _dayjs.default)(value).format('YYYY-MM-DDTHH:mm'),
      onChange: e => this.handleChange((0, _dayjs.default)(e.target.value)),
      onFocus: setActiveStyle,
      onBlur: setInactiveStyle,
      disabled: isDisabled
    }), !isDisabled && (0, _react2.jsx)(Buttons, {
      t: t,
      handleChange: v => this.handleChange(v)
    }));
  }
}
exports.default = DateTimeControl;
_defineProperty(DateTimeControl, "propTypes", {
  field: _propTypes.default.object.isRequired,
  forID: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  value: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])
});